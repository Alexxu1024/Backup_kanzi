/*
Copyright 2011-2017 Frederic Langlet
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
you may obtain a copy of the License at

                http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#if defined(_MSC_VER)
#include <intrin.h>  
#elif defined(__clang__)
#include <lzcntintrin.h>
#endif

#include "Global.hpp"
#include "IllegalArgumentException.hpp"

using namespace kanzi;

const int Global::INFINITE_VALUE = 0;
const int Global::PI_1024 = 3217;
const int Global::PI_1024_MULT2 = PI_1024 << 1;
const int Global::SMALL_RAD_ANGLE_1024 = 256; // arbitrarily set to 0.25 rad
const int Global::CONST1 = 326; // 326 >> 12 === 1/(4*Math.PI)

const uint32 Global::SQRT_THRESHOLD0 = 1 << 8;
const uint32 Global::SQRT_THRESHOLD1 = 1 << 16;
const uint32 Global::SQRT_THRESHOLD2 = (1 << 10) - 3;
const uint32 Global::SQRT_THRESHOLD3 = (1 << 14) - 28;
const uint32 Global::SQRT_THRESHOLD4 = 1 << 24;
const uint32 Global::SQRT_THRESHOLD5 = 1 << 20;
const uint32 Global::SQRT_THRESHOLD6 = 1 << 28;
const uint32 Global::SQRT_THRESHOLD7 = 1 << 26;
const uint32 Global::SQRT_THRESHOLD8 = 1 << 30;

// array with 256 elements: int(Math.log2(x-1))
const int Global::LOG2[] = {
    0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,
};

// array with 256 elements: 4096*Math.log2(x)
const int Global::LOG2_4096[] = {
         0,     0,  4096,  6492,  8192,  9511, 10588, 11499, 12288, 12984,
     13607, 14170, 14684, 15157, 15595, 16003, 16384, 16742, 17080, 17400,
     17703, 17991, 18266, 18529, 18780, 19021, 19253, 19476, 19691, 19898,
     20099, 20292, 20480, 20662, 20838, 21010, 21176, 21338, 21496, 21649,
     21799, 21945, 22087, 22226, 22362, 22495, 22625, 22752, 22876, 22998,
     23117, 23234, 23349, 23462, 23572, 23680, 23787, 23892, 23994, 24095,
     24195, 24292, 24388, 24483, 24576, 24668, 24758, 24847, 24934, 25021,
     25106, 25189, 25272, 25354, 25434, 25513, 25592, 25669, 25745, 25820,
     25895, 25968, 26041, 26112, 26183, 26253, 26322, 26390, 26458, 26525,
     26591, 26656, 26721, 26784, 26848, 26910, 26972, 27033, 27094, 27154,
     27213, 27272, 27330, 27388, 27445, 27502, 27558, 27613, 27668, 27722,
     27776, 27830, 27883, 27935, 27988, 28039, 28090, 28141, 28191, 28241,
     28291, 28340, 28388, 28437, 28484, 28532, 28579, 28626, 28672, 28718,
     28764, 28809, 28854, 28898, 28943, 28987, 29030, 29074, 29117, 29159,
     29202, 29244, 29285, 29327, 29368, 29409, 29450, 29490, 29530, 29570,
     29609, 29649, 29688, 29726, 29765, 29803, 29841, 29879, 29916, 29954,
     29991, 30027, 30064, 30100, 30137, 30172, 30208, 30244, 30279, 30314,
     30349, 30384, 30418, 30452, 30486, 30520, 30554, 30587, 30621, 30654,
     30687, 30719, 30752, 30784, 30817, 30849, 30880, 30912, 30944, 30975,
     31006, 31037, 31068, 31099, 31129, 31160, 31190, 31220, 31250, 31280,
     31309, 31339, 31368, 31397, 31426, 31455, 31484, 31513, 31541, 31569,
     31598, 31626, 31654, 31681, 31709, 31737, 31764, 31791, 31818, 31846,
     31872, 31899, 31926, 31952, 31979, 32005, 32031, 32058, 32084, 32109,
     32135, 32161, 32186, 32212, 32237, 32262, 32287, 32312, 32337, 32362,
     32387, 32411, 32436, 32460, 32484, 32508, 32533, 32557, 32580, 32604,
     32628, 32651, 32675, 32698, 32722, 32745, 32768
};

// array with 10 elements: 10 * (4096*Math.log10(x))
const int Global::TEN_LOG10_100[] = {
    0, 0, 12330, 19542, 24660, 28629, 31873, 34615, 36990, 39085,
    40960, 42655, 44203, 45627, 46945, 48172, 49320, 50399, 51415, 52377,
    53290, 54158, 54985, 55776, 56533, 57259, 57957, 58628, 59275, 59899,
    60502, 61086, 61650, 62198, 62729, 63245, 63746, 64233, 64707, 65170,
    65620, 66059, 66488, 66906, 67315, 67715, 68106, 68489, 68863, 69230,
    69589, 69942, 70287, 70626, 70958, 71285, 71605, 71920, 72230, 72534,
    72833, 73127, 73416, 73700, 73981, 74256, 74528, 74796, 75059, 75319,
    75575, 75827, 76076, 76321, 76563, 76802, 77038, 77270, 77500, 77726,
    77950, 78171, 78389, 78605, 78818, 79028, 79237, 79442, 79646, 79847,
    80045, 80242, 80436, 80629, 80819, 81007, 81193, 81378, 81560, 81741,
};

// array with 256 elements: 1024*Math.sin(x) x in [0..Math.PI[
const int Global::SIN_1024[] = {
    0, 12, 25, 37, 50, 62, 75, 87, 100, 112, 125, 137, 150, 162, 175, 187,
    199, 212, 224, 236, 248, 260, 273, 285, 297, 309, 321, 333, 344, 356, 368, 380,
    391, 403, 414, 426, 437, 449, 460, 471, 482, 493, 504, 515, 526, 537, 547, 558,
    568, 579, 589, 599, 609, 620, 629, 639, 649, 659, 668, 678, 687, 696, 706, 715,
    724, 732, 741, 750, 758, 767, 775, 783, 791, 799, 807, 814, 822, 829, 837, 844,
    851, 858, 865, 871, 878, 884, 890, 897, 903, 908, 914, 920, 925, 930, 936, 941,
    946, 950, 955, 959, 964, 968, 972, 976, 979, 983, 986, 990, 993, 996, 999, 1001,
    1004, 1006, 1008, 1010, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1022, 1023, 1023, 1023,
    1023, 1023, 1023, 1023, 1022, 1022, 1021, 1020, 1019, 1017, 1016, 1014, 1012, 1010, 1008, 1006,
    1004, 1001, 999, 996, 993, 990, 986, 983, 979, 976, 972, 968, 964, 959, 955, 950,
    946, 941, 936, 930, 925, 920, 914, 908, 903, 897, 890, 884, 878, 871, 865, 858,
    851, 844, 837, 829, 822, 814, 807, 799, 791, 783, 775, 767, 758, 750, 741, 732,
    724, 715, 706, 696, 687, 678, 668, 659, 649, 639, 629, 620, 609, 599, 589, 579,
    568, 558, 547, 537, 526, 515, 504, 493, 482, 471, 460, 449, 437, 426, 414, 403,
    391, 380, 368, 356, 344, 333, 321, 309, 297, 285, 273, 260, 248, 236, 224, 212,
    199, 187, 175, 162, 150, 137, 125, 112, 100, 87, 75, 62, 50, 37, 25, 12,
};

// array with 256 elements: 1024*Math.cos(x) x in [0..Math.PI[
const int Global::COS_1024[] = {
    1024, 1023, 1023, 1023, 1022, 1022, 1021, 1020, 1019, 1017, 1016, 1014, 1012, 1010, 1008, 1006,
    1004, 1001, 999, 996, 993, 990, 986, 983, 979, 976, 972, 968, 964, 959, 955, 950,
    946, 941, 936, 930, 925, 920, 914, 908, 903, 897, 890, 884, 878, 871, 865, 858,
    851, 844, 837, 829, 822, 814, 807, 799, 791, 783, 775, 767, 758, 750, 741, 732,
    724, 715, 706, 696, 687, 678, 668, 659, 649, 639, 629, 620, 609, 599, 589, 579,
    568, 558, 547, 537, 526, 515, 504, 493, 482, 471, 460, 449, 437, 426, 414, 403,
    391, 380, 368, 356, 344, 333, 321, 309, 297, 285, 273, 260, 248, 236, 224, 212,
    199, 187, 175, 162, 150, 137, 125, 112, 100, 87, 75, 62, 50, 37, 25, 12,
    0, -12, -25, -37, -50, -62, -75, -87, -100, -112, -125, -137, -150, -162, -175, -187,
    -199, -212, -224, -236, -248, -260, -273, -285, -297, -309, -321, -333, -344, -356, -368, -380,
    -391, -403, -414, -426, -437, -449, -460, -471, -482, -493, -504, -515, -526, -537, -547, -558,
    -568, -579, -589, -599, -609, -620, -629, -639, -649, -659, -668, -678, -687, -696, -706, -715,
    -724, -732, -741, -750, -758, -767, -775, -783, -791, -799, -807, -814, -822, -829, -837, -844,
    -851, -858, -865, -871, -878, -884, -890, -897, -903, -908, -914, -920, -925, -930, -936, -941,
    -946, -950, -955, -959, -964, -968, -972, -976, -979, -983, -986, -990, -993, -996, -999, -1001,
    -1004, -1006, -1008, -1010, -1012, -1014, -1016, -1017, -1019, -1020, -1021, -1022, -1022, -1023, -1023, -1023,
};

//  65536/(1 + exp(-alpha*x))
const int Global::INV_EXP[] = {
    // alpha = 0.55
    0, 17, 30, 51, 89, 154, 267, 461, 795, 1366,
    2331, 3938, 6537, 10558, 16367, 23977, 32768, 41559, 49169, 54978,
    58999, 61598, 63205, 64170, 64741, 65075, 65269, 65382, 65447, 65485,
    65506, 65519, 65526
};

const int Global::SQRT[] = {
    0, 16, 23, 28, 32, 36, 39, 42, 45, 48, 51, 53, 55, 58, 60, 62,
    64, 66, 68, 70, 72, 73, 75, 77, 78, 80, 82, 83, 85, 86, 88, 89,
    91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110,
    111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 139, 140, 141, 142,
    143, 144, 145, 146, 147, 148, 148, 149, 150, 151, 152, 153, 153, 154, 155, 156,
    157, 158, 158, 159, 160, 161, 162, 162, 163, 164, 165, 166, 166, 167, 168, 169,
    169, 170, 171, 172, 172, 173, 174, 175, 175, 176, 177, 177, 178, 179, 180, 180,
    181, 182, 182, 183, 184, 185, 185, 186, 187, 187, 188, 189, 189, 190, 191, 191,
    192, 193, 193, 194, 195, 195, 196, 197, 197, 198, 199, 199, 200, 200, 201, 202,
    202, 203, 204, 204, 205, 206, 206, 207, 207, 208, 209, 209, 210, 210, 211, 212,
    212, 213, 213, 214, 215, 215, 216, 216, 217, 218, 218, 219, 219, 220, 221, 221,
    222, 222, 223, 223, 224, 225, 225, 226, 226, 227, 227, 228, 229, 229, 230, 230,
    231, 231, 232, 232, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239,
    239, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247,
    248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255
};

const int* Global::SQUASH = Global::initSquash();

const int* Global::initSquash()
{
    int* res = new int[4096];

    for (int x = -2047; x <= 2047; x++) {
       int w = x & 127;
       int y = (x >> 7) + 16;
       res[x+2047] = (INV_EXP[y] * (128 - w) + INV_EXP[y + 1] * w) >> 11;
    }

    return res;
}

const int* Global::STRETCH = Global::initStretch();

const int* Global::initStretch()
{
    int* res = new int[4096];
    int n = 0;

    for (int x = -2047; (x <= 2047) && (n < 4096); x++) {
        const int sq = squash(x);

        while (n <= sq)
            res[n++] = x;
    }

    res[4095] = 2047;
    return res;
}


// Return 1024 * log2(x)
// Max error is around 0.1%
int Global::log2_1024(uint32 x) THROW
{
    if (x == 0)
        throw IllegalArgumentException("Cannot calculate log of a negative or null value");

    if (x < 256)
        return (Global::LOG2_4096[x]+2) >> 2;

    const int log = _log2(x);

    if ((x & (x - 1)) == 0)
        return log << 10;
    
    return ((log-7)*1024) + ((LOG2_4096[x>>(log-7)]+2) >> 2);
}


// Return 1024 * 10 * log10(x)
int Global::ten_log10(uint32 x) THROW
{
    if (x == 0)
        throw IllegalArgumentException("Cannot calculate log of a negative or null value");

    if (x < 100)
        return (Global::TEN_LOG10_100[x]+2) >> 2;

    return (log2_1024(x) * 6165) >> 11; // 10 * 1/log2(10)
}


int Global::log2(uint32 x) THROW
{
    if (x == 0)
        throw IllegalArgumentException("Cannot calculate log of a negative or null value");

    return _log2(x);
}


inline int Global::_log2(uint32 x)
{
    #if defined(_MSC_VER)
        int res;
        _BitScanReverse((unsigned long*) &res, x);
        return res;
    #elif defined(__GNUG__)
        return 31 - __builtin_clz(x);
    #elif defined(__clang__)
        return 31 - __lzcnt32(x);
    #else
        int res = 0;

        if (x >= 1 << 16) {
           x >>= 16;
           res = 16;
        }

        if (x >= 1 << 8) {
           x >>= 8;
           res += 8;
        }

        return res + Global::LOG2[x - 1];
    #endif
}


void Global::computeJobsPerTask(int jobsPerTask[], int jobs, int tasks)
{
	if ((jobs <= 0) || (tasks <= 0))
		return;

	int q = (jobs <= tasks) ? 1 : jobs / tasks;
	int r = (jobs <= tasks) ? 0 : jobs - q * tasks;

	for (int i = 0; i < tasks; i++)
		jobsPerTask[i] = q;

	int n = 0;

	while (r != 0) {
		jobsPerTask[n]++;
		r--;
		n++;

		if (n == tasks)
			n = 0;
	}
}