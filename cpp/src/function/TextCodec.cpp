/*
Copyright 2011-2017 Frederic Langlet
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
you may obtain a copy of the License at

                http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <sstream>
#include "TextCodec.hpp"
#include "../IllegalArgumentException.hpp"

using namespace kanzi;

// 1024 of the most common English words with at least 2 chars.
// Each char is 6 bit encoded: 0 to 31. Add 32 to a letter starting a word (MSB).
// TheBeAndOfInToHaveItThatFor...
const byte TextCodec::DICT_EN_1024[] = {
    byte(0xCC), byte(0x71), byte(0x21), byte(0x12), byte(0x03), byte(0x43), byte(0xB8), byte(0x5A),
    byte(0x0D), byte(0xCC), byte(0xE9), byte(0xC0), byte(0x54), byte(0x4A), byte(0x13), byte(0xCC),
    byte(0x70), byte(0x13), byte(0x94), byte(0xE4), byte(0x78), byte(0x39), byte(0x49), byte(0xC4),
    byte(0xD8), byte(0x84), byte(0xC7), byte(0xB8), byte(0xD8), byte(0xCE), byte(0xC8), byte(0x06),
    byte(0x20), byte(0x4F), byte(0x61), byte(0x21), byte(0x62), byte(0xC6), byte(0x34), byte(0x3F),
    byte(0x44), byte(0xB2), byte(0x3A), byte(0xC1), byte(0x2E), byte(0x46), byte(0x04), byte(0xA6),
    byte(0x3A), byte(0xD3), byte(0xA0), byte(0x36), byte(0x84), byte(0xA8), byte(0x16), byte(0x15),
    byte(0x13), byte(0xD8), byte(0x04), byte(0xB3), byte(0x1C), byte(0x84), byte(0xB3), byte(0x1C),
    byte(0x46), byte(0x27), byte(0x21), byte(0x29), byte(0x51), byte(0x38), byte(0xCB), byte(0x4E),
    byte(0x4F), byte(0x21), byte(0xC4), byte(0xD8), byte(0x70), byte(0x13), byte(0xCC), byte(0x71),
    byte(0x08), byte(0x46), byte(0x20), byte(0x0D), byte(0xD8), byte(0x73), byte(0xA6), byte(0x11),
    byte(0x39), byte(0xC0), byte(0x4A), byte(0x04), byte(0x44), byte(0xD8), byte(0xE5), byte(0x0B),
    byte(0x0E), byte(0x71), byte(0x11), byte(0x80), byte(0xB2), byte(0xEC), byte(0x00), byte(0xA1),
    byte(0x20), byte(0x04), byte(0xE5), byte(0x13), byte(0xA8), byte(0xD3), byte(0x96), byte(0xD8),
    byte(0x82), byte(0xCB), byte(0xB8), byte(0xD1), byte(0x33), byte(0x20), byte(0xC1), byte(0x33),
    byte(0x1C), byte(0x44), byte(0x44), byte(0xE0), byte(0x40), byte(0x11), byte(0xCC), byte(0x72),
    byte(0x0D), byte(0x2B), byte(0x61), byte(0xC4), byte(0x37), byte(0x61), byte(0xC8), byte(0x08),
    byte(0x7C), byte(0xC7), byte(0x10), byte(0xCC), byte(0x8E), byte(0x30), byte(0x4B), byte(0xC4),
    byte(0x38), byte(0xF2), byte(0xC4), byte(0xCC), byte(0x02), byte(0x84), byte(0xB9), byte(0x44),
    byte(0xE8), byte(0x35), byte(0x33), byte(0xA9), byte(0x51), byte(0x24), byte(0xF2), byte(0x10),
    byte(0x49), byte(0xC8), byte(0x33), byte(0x83), byte(0x94), byte(0x46), byte(0x23), byte(0x8C),
    byte(0x12), byte(0x23), byte(0x94), byte(0x2C), byte(0x3B), byte(0x4E), byte(0x5B), byte(0x31),
    byte(0xC0), byte(0x36), byte(0xB2), byte(0x0A), byte(0x12), byte(0xE4), byte(0xC7), byte(0x11),
    byte(0x19), byte(0xCE), byte(0x5B), byte(0x31), byte(0xC4), byte(0x36), byte(0x84), byte(0xD2),
    byte(0xB9), byte(0x44), byte(0x73), byte(0x58), byte(0xEB), byte(0x0E), byte(0x44), byte(0x4C),
    byte(0xC7), byte(0x11), byte(0x21), byte(0x36), byte(0x00), byte(0xD4), byte(0xF6), byte(0x01),
    byte(0x8A), byte(0xCE), byte(0x38), byte(0xA9), byte(0x48), byte(0x45), byte(0x24), byte(0xED),
    byte(0x11), byte(0x68), byte(0x44), byte(0x08), byte(0x05), byte(0x12), byte(0x12), byte(0x30),
    byte(0x18), byte(0xD1), byte(0x21), byte(0x2C), byte(0x00), byte(0xD9), byte(0xC4), byte(0x44),
    byte(0x4C), byte(0xC7), byte(0x20), byte(0xD1), byte(0xA6), byte(0x21), byte(0x51), byte(0x2C),
    byte(0x00), byte(0xD6), byte(0x36), byte(0x10), byte(0xB2), byte(0xEE), byte(0x34), byte(0xB6),
    byte(0x33), byte(0x10), byte(0xB2), byte(0xF5), byte(0x11), byte(0x16), byte(0x24), byte(0x54),
    byte(0x43), byte(0x61), byte(0x00), byte(0x22), byte(0xA0), byte(0x35), byte(0x89), byte(0x8E),
    byte(0x38), byte(0x39), byte(0xC0), byte(0x0F), byte(0x20), byte(0x08), byte(0x0F), byte(0x21),
    byte(0x04), byte(0x37), byte(0x61), byte(0x11), byte(0x13), byte(0x31), byte(0xD1), byte(0x39),
    byte(0x41), byte(0x87), byte(0xD8), byte(0xE4), byte(0x4A), byte(0x8C), byte(0xE5), byte(0x8D),
    byte(0xB0), byte(0x06), byte(0x20), byte(0x15), byte(0x31), byte(0x11), byte(0xC8), byte(0x73),
    byte(0x94), byte(0x2C), byte(0x3B), byte(0x95), byte(0x11), byte(0x18), byte(0x12), byte(0x2B),
    byte(0x34), byte(0x58), byte(0xCC), byte(0xE3), byte(0xAC), byte(0x50), byte(0x21), byte(0xEF),
    byte(0x51), byte(0x3B), byte(0x96), byte(0x36), byte(0xE2), byte(0xC3), byte(0xB8), byte(0x51),
    byte(0x78), byte(0x11), byte(0x39), byte(0xC8), byte(0x18), byte(0x7A), byte(0xCE), byte(0x5B),
    byte(0x63), byte(0x8C), byte(0x00), byte(0xD8), byte(0x44), byte(0x4D), byte(0x61), byte(0x04),
    byte(0x36), byte(0xB0), byte(0x12), byte(0x4E), byte(0xD1), byte(0x04), byte(0x0E), byte(0x02),
    byte(0xD2), byte(0x3A), byte(0x20), byte(0x0B), byte(0x2E), byte(0x52), byte(0x0D), byte(0x0F),
    byte(0x11), byte(0x00), byte(0x2C), byte(0xB6), byte(0x2A), byte(0x11), byte(0x8A), byte(0xC8),
    byte(0x14), byte(0x48), byte(0x80), byte(0x47), byte(0x21), byte(0x13), byte(0x94), byte(0x84),
    byte(0xE2), byte(0x45), byte(0x89), byte(0x06), byte(0x1B), byte(0x32), byte(0x04), byte(0x94),
    byte(0x04), byte(0xEB), byte(0x20), byte(0xFB), byte(0x08), byte(0x5E), byte(0xB0), byte(0x01),
    byte(0x98), byte(0x03), byte(0xF3), byte(0x10), byte(0x08), byte(0x44), byte(0x08), byte(0xE3),
    byte(0x04), byte(0x88), byte(0x72), byte(0x0B), byte(0x0F), byte(0x63), byte(0x91), byte(0x2C),
    byte(0x3C), byte(0xC7), byte(0x39), byte(0x21), byte(0x32), byte(0x08), byte(0x73), byte(0x8E),
    byte(0x2F), byte(0x24), byte(0xC8), byte(0x2C), byte(0xB9), byte(0x44), byte(0x10), byte(0xBC),
    byte(0x93), byte(0x01), byte(0x31), byte(0x2D), byte(0x11), byte(0x51), byte(0x11), byte(0xC8),
    byte(0xE3), byte(0x04), byte(0x4C), byte(0x72), byte(0x0D), byte(0x1A), byte(0xC3), byte(0x92),
    byte(0x4E), byte(0x03), byte(0x4E), byte(0x4C), byte(0x71), byte(0x11), byte(0x94), byte(0x03),
    byte(0x08), byte(0x2D), byte(0x8A), byte(0xC4), byte(0x01), byte(0x51), byte(0x36), byte(0x1C),
    byte(0x82), byte(0xC4), byte(0xB0), byte(0x40), byte(0x0D), byte(0xA8), byte(0x41), byte(0x0F),
    byte(0xC9), byte(0x35), byte(0x03), byte(0x10), byte(0xD4), byte(0xF6), byte(0x1D), byte(0x8A),
    byte(0xC4), byte(0x4E), byte(0x64), byte(0x44), byte(0x01), byte(0x3C), byte(0x80), byte(0x30),
    byte(0x4B), byte(0x48), byte(0x08), byte(0x48), byte(0x48), byte(0x1A), byte(0x64), byte(0x4E),
    byte(0x50), byte(0xF8), byte(0x44), byte(0x18), byte(0x83), byte(0x72), byte(0x10), byte(0x43),
    byte(0x22), byte(0x39), byte(0x43), byte(0x53), byte(0x45), byte(0x89), byte(0xC4), byte(0x2C),
    byte(0xFC), byte(0xC0), byte(0x2C), byte(0xAD), byte(0x87), byte(0x11), byte(0x11), byte(0x33),
    byte(0x51), byte(0x13), byte(0x6F), byte(0x44), byte(0xE0), byte(0x4B), byte(0x10), byte(0xC9),
    byte(0x15), byte(0x11), byte(0x16), byte(0x32), byte(0x4C), byte(0x04), byte(0x53), byte(0x9C),
    byte(0x03), byte(0x43), byte(0xB0), byte(0x81), byte(0x87), byte(0x4F), byte(0x21), byte(0xCE),
    byte(0x5A), byte(0xF0), byte(0x11), byte(0x4E), byte(0x01), byte(0x80), byte(0x20), byte(0xD4),
    byte(0x93), byte(0xBC), byte(0xB0), byte(0x02), byte(0x13), byte(0x25), byte(0x02), byte(0x1E),
    byte(0x01), byte(0x80), byte(0x20), byte(0xD9), byte(0x44), byte(0x5A), byte(0x20), byte(0x12),
    byte(0x13), byte(0x61), byte(0x04), byte(0x2A), byte(0x23), byte(0x8C), byte(0x3C), byte(0x03),
    byte(0x58), byte(0xC9), byte(0x84), byte(0x93), byte(0x10), byte(0xC9), byte(0x00), byte(0x08),
    byte(0x7C), byte(0x48), byte(0x18), byte(0x74), byte(0xEF), byte(0x44), byte(0xE1), byte(0x91),
    byte(0x00), byte(0xC9), byte(0xC4), byte(0x01), byte(0x1C), byte(0x14), byte(0x11), byte(0x24),
    byte(0xC8), byte(0x38), byte(0xD8), byte(0xD4), byte(0x44), byte(0x83), byte(0x46), byte(0xBC),
    byte(0xB0), byte(0x18), byte(0xC5), byte(0x43), byte(0x72), byte(0x30), byte(0x02), byte(0xCB),
    byte(0xB5), byte(0x43), byte(0x01), byte(0x11), byte(0x18), byte(0x0B), byte(0x58), byte(0x06),
    byte(0x12), byte(0xB0), byte(0xE5), byte(0x44), byte(0xB4), byte(0x81), byte(0x87), byte(0x4E),
    byte(0xB2), byte(0x15), byte(0x13), byte(0x61), byte(0x0D), byte(0x4E), byte(0xF3), byte(0x88),
    byte(0x35), byte(0x38), byte(0x44), byte(0x2C), byte(0x81), byte(0x15), byte(0x12), byte(0x73),
    byte(0x8B), byte(0x0F), byte(0x33), byte(0x83), byte(0x01), byte(0x88), byte(0x51), byte(0x20),
    byte(0xD1), byte(0xA7), byte(0x00), byte(0xF3), byte(0xC4), byte(0x36), byte(0xD1), byte(0x17),
    byte(0x4F), byte(0x62), byte(0x13), byte(0x1C), byte(0xE5), byte(0x13), byte(0x84), byte(0x41),
    byte(0x4E), byte(0x44), byte(0x4A), byte(0xC0), byte(0x44), byte(0x61), byte(0x2C), byte(0x20),
    byte(0xB2), byte(0xC8), byte(0x38), byte(0xDB), byte(0x14), byte(0x49), byte(0x39), byte(0xCE),
    byte(0x30), byte(0x4D), byte(0x0D), byte(0x0C), byte(0x44), byte(0x76), byte(0x01), byte(0x31),
    byte(0x11), byte(0xC4), byte(0xE3), byte(0x8C), byte(0xD9), byte(0x12), byte(0x13), byte(0x12),
    byte(0xC3), byte(0x93), byte(0x1C), byte(0x44), byte(0x60), byte(0x44), byte(0x40), byte(0x2D),
    byte(0x01), byte(0x32), byte(0x0E), byte(0x34), byte(0x02), byte(0xEC), byte(0x38), byte(0xD1),
    byte(0x18), byte(0xC9), byte(0x33), byte(0x91), byte(0x63), byte(0x83), byte(0x94), byte(0x34),
    byte(0x69), byte(0x40), byte(0x09), byte(0x3B), byte(0x0E), byte(0x35), byte(0x31), byte(0xE3),
    byte(0x20), byte(0x51), byte(0x44), byte(0x44), byte(0x43), byte(0x53), byte(0xAC), byte(0xE4),
    byte(0xF2), byte(0x4D), byte(0x40), byte(0xD8), byte(0x84), byte(0xE3), byte(0x8A), byte(0x91),
    byte(0x81), byte(0x29), byte(0x38), byte(0x1D), byte(0x8E), byte(0x44), byte(0x3C), byte(0xC7),
    byte(0x39), byte(0x41), byte(0x87), byte(0x85), byte(0x44), byte(0x88), byte(0x34), byte(0x44),
    byte(0x92), byte(0xA1), byte(0x24), byte(0x94), byte(0x13), byte(0x22), byte(0x03), byte(0x12),
    byte(0xA2), byte(0x0D), byte(0x0E), byte(0x71), byte(0x00), byte(0x0E), byte(0x50), byte(0x11),
    byte(0xC4), byte(0x40), byte(0xE6), byte(0x44), byte(0x41), byte(0x0D), byte(0x84), byte(0xB5),
    byte(0x04), byte(0xD8), byte(0x72), byte(0x13), byte(0x12), byte(0x12), byte(0xC0), byte(0x08),
    byte(0xAA), byte(0xCE), byte(0x34), byte(0x69), byte(0xC0), byte(0x21), byte(0x18), byte(0x4E),
    byte(0x4C), byte(0x7A), byte(0xC8), byte(0x4D), byte(0x32), byte(0xC4), byte(0x9C), byte(0xE5),
    byte(0x12), byte(0x13), byte(0x81), byte(0x12), byte(0xC8), byte(0x83), byte(0x42), byte(0x12),
    byte(0xF4), byte(0x4E), byte(0x54), byte(0x80), byte(0xC4), byte(0xC8), byte(0x44), byte(0x55),
    byte(0x20), byte(0x21), byte(0x20), byte(0x44), byte(0xE5), byte(0x0D), byte(0x0E), byte(0x54),
    byte(0x48), byte(0x10), byte(0xD0), byte(0xE8), byte(0x30), byte(0xF3), byte(0x91), byte(0x4C),
    byte(0x03), byte(0x53), byte(0x94), byte(0x04), byte(0xC7), byte(0x11), byte(0x1C), byte(0x88),
    byte(0x4E), byte(0x05), byte(0x80), byte(0x63), byte(0x43), byte(0x53), byte(0x20), byte(0xBB),
    byte(0xCE), byte(0x58), byte(0x44), byte(0x67), byte(0x39), byte(0x44), byte(0x66), byte(0x00),
    byte(0xC1), byte(0x2E), byte(0x15), byte(0x31), byte(0x0D), byte(0xAC), byte(0x83), byte(0x44),
    byte(0x91), byte(0x81), byte(0x12), byte(0x90), byte(0xD0), byte(0xE0), byte(0x30), byte(0xE3),
    byte(0x46), byte(0x91), byte(0x51), byte(0x11), byte(0xC9), byte(0x30), byte(0x0D), byte(0x0E),
    byte(0x10), byte(0x03), byte(0xAC), byte(0xE4), byte(0x84), byte(0x9C), byte(0xE5), byte(0x84),
    byte(0x54), byte(0x44), byte(0x6C), byte(0x10), byte(0xC0), byte(0x44), byte(0x46), byte(0xF0),
    byte(0x18), byte(0xAC), byte(0x05), byte(0xAC), byte(0x10), byte(0x44), byte(0xE2), byte(0x21),
    byte(0x36), byte(0x20), byte(0x2C), byte(0xC3), byte(0x92), byte(0x4E), byte(0x83), byte(0x42),
    byte(0x2D), byte(0x40), byte(0xC4), byte(0x88), byte(0xE3), byte(0x53), byte(0x20), byte(0xD5),
    byte(0x04), byte(0xAC), byte(0x04), byte(0xC4), byte(0x46), byte(0xD0), byte(0x0C), byte(0x12),
    byte(0xE3), byte(0x42), byte(0x12), byte(0xB1), byte(0x00), byte(0x49), byte(0x3A), byte(0xC4),
    byte(0x01), byte(0x13), byte(0x71), byte(0x10), byte(0x02), byte(0xE2), byte(0x1C), byte(0x03),
    byte(0x46), byte(0x13), byte(0x31), byte(0x00), byte(0x32), byte(0xC2), byte(0x0D), byte(0x51),
    byte(0x31), byte(0x21), byte(0x11), byte(0x24), byte(0xF2), byte(0x11), byte(0x51), byte(0x11),
    byte(0x00), byte(0xBA), byte(0x03), byte(0x10), byte(0x0A), byte(0x88), byte(0x0E), byte(0x13),
    byte(0x83), byte(0x62), byte(0x83), byte(0x45), byte(0x39), byte(0x13), byte(0x00), byte(0x4C),
    byte(0x83), byte(0x8D), byte(0xB4), byte(0xE4), byte(0xC7), byte(0x20), byte(0xD1), byte(0xA0),
    byte(0x35), byte(0x84), byte(0xC7), byte(0x20), byte(0xD1), byte(0xA4), byte(0x54), byte(0x44),
    byte(0x58), byte(0x4C), byte(0x72), byte(0x0D), byte(0x1A), byte(0x01), byte(0x8E), byte(0xAC),
    byte(0x40), byte(0x03), byte(0xC8), byte(0xE0), byte(0x88), byte(0x00), byte(0xBD), byte(0x0D),
    byte(0x0C), byte(0x44), byte(0x52), byte(0x4C), byte(0x03), byte(0x43), byte(0xD8), byte(0x71),
    byte(0x13), byte(0x1C), byte(0x44), byte(0x76), byte(0x01), byte(0x30), byte(0x87), byte(0xCC),
    byte(0xE1), byte(0x84), byte(0x4C), byte(0x71), byte(0x11), byte(0x94), byte(0xE2), byte(0xCB),
    byte(0x39), byte(0x6B), byte(0xC0), byte(0x44), byte(0x43), byte(0x53), byte(0xC9), byte(0x33),
    byte(0x8F), byte(0x94), byte(0x00), byte(0x84), byte(0x89), byte(0x11), byte(0x00), byte(0x4C),
    byte(0x4B), byte(0xD4), byte(0x04), byte(0xB2), byte(0x02), byte(0x80), byte(0xB4), byte(0x44),
    byte(0x00), byte(0x36), byte(0x32), byte(0x3C), byte(0x40), byte(0x0A), byte(0xB9), byte(0x31),
    byte(0xC4), byte(0x45), byte(0x2C), byte(0x44), byte(0x00), byte(0x3A), byte(0xC4), byte(0x54),
    byte(0x42), byte(0xE0), byte(0x2C), byte(0xB3), byte(0x96), byte(0x80), byte(0x30), byte(0xEE),
    byte(0x14), byte(0x52), byte(0x02), byte(0x13), byte(0x23), byte(0xC4), byte(0x34), byte(0x38),
    byte(0xCE), byte(0x39), byte(0x19), byte(0xC4), byte(0x00), byte(0xB4), byte(0xC7), byte(0xBC),
    byte(0x44), byte(0x52), byte(0x38), byte(0xD8), byte(0x11), byte(0x4F), byte(0x25), byte(0x11),
    byte(0x13), byte(0x60), byte(0x11), byte(0x9C), byte(0x84), byte(0x93), byte(0x39), byte(0x16),
    byte(0x2F), byte(0x01), byte(0x14), byte(0xD8), byte(0xD8), byte(0x84), byte(0xC7), byte(0x20),
    byte(0xD9), byte(0x91), byte(0x39), byte(0x6C), byte(0x44), byte(0x49), byte(0x42), byte(0xD3),
    byte(0xB8), byte(0xF1), byte(0x0D), byte(0xD8), byte(0x02), byte(0xCA), byte(0xC4), byte(0x40),
    byte(0x12), byte(0x38), byte(0xDD), byte(0x88), byte(0x37), byte(0x11), byte(0x12), byte(0x10),
    byte(0x04), byte(0x42), byte(0x1E), byte(0x62), byte(0x11), byte(0x2E), byte(0x65), byte(0x18),
    byte(0x90), byte(0x04), byte(0x4B), byte(0x62), byte(0x53), byte(0x8E), byte(0x0E), byte(0xC3),
    byte(0x8C), byte(0x10), byte(0xD4), byte(0xE7), byte(0x20), byte(0xC4), byte(0x84), byte(0x2C),
    byte(0x58), byte(0x08), byte(0x47), byte(0x31), byte(0x00), byte(0x08), byte(0x71), byte(0x11),
    byte(0x94), byte(0xE4), byte(0x42), byte(0x12), byte(0xE1), byte(0x45), byte(0x11), byte(0x19),
    byte(0x0D), byte(0x39), byte(0x41), byte(0x87), byte(0x90), byte(0x35), byte(0x02), byte(0x01),
    byte(0x32), byte(0x0E), byte(0x36), byte(0x00), byte(0x91), byte(0x39), byte(0x24), byte(0xA0),
    byte(0x2D), byte(0x31), byte(0xCE), byte(0x50), byte(0x61), byte(0xF1), byte(0x10), byte(0xC1),
    byte(0x0C), byte(0x04), byte(0x44), byte(0x65), byte(0x38), byte(0xE4), byte(0xF2), byte(0x10),
    byte(0x23), byte(0x8D), byte(0x0E), byte(0x13), byte(0x98), byte(0xB0), byte(0x06), byte(0x01),
    byte(0x13), byte(0x33), byte(0x96), byte(0x01), byte(0x10), byte(0xE0), byte(0x04), byte(0xB1),
    byte(0x20), byte(0x18), byte(0x4B), byte(0xCE), byte(0x2C), byte(0x80), byte(0x98), byte(0xAC),
    byte(0xE5), byte(0x44), byte(0xBD), byte(0x13), byte(0x82), byte(0x11), byte(0x24), byte(0xAC),
    byte(0x51), byte(0x22), byte(0x02), byte(0xA0), byte(0xD0), byte(0x8B), byte(0x50), byte(0x32),
    byte(0x0D), byte(0x1A), byte(0x23), byte(0x8D), byte(0x48), byte(0x80), byte(0xC4), byte(0x46),
    byte(0x03), byte(0xCF), byte(0x10), byte(0x04), byte(0x60), byte(0x09), byte(0x35), byte(0x00),
    byte(0x2C), byte(0xB6), byte(0x21), byte(0x51), byte(0x8B), byte(0xD1), byte(0x38), byte(0x10),
    byte(0x01), byte(0x2D), byte(0x89), byte(0xD4), byte(0x30), byte(0x03), byte(0x76), byte(0x00),
    byte(0x84), byte(0xF2), byte(0x11), byte(0x15), byte(0x44), byte(0xB0), byte(0x04), byte(0x4A),
    byte(0x11), byte(0x38), byte(0xC8), byte(0x12), byte(0x45), byte(0xCF), byte(0x10), byte(0x24),
    byte(0xF2), byte(0x10), byte(0xD4), byte(0x84), byte(0x85), byte(0x42), byte(0x0B), byte(0x0F),
    byte(0x24), byte(0xC0), byte(0x62), byte(0x50), byte(0x0B), byte(0x2E), byte(0xF2), byte(0xC0),
    byte(0x36), byte(0x25), byte(0x13), byte(0x88), byte(0xE2), byte(0xCB), byte(0x10), byte(0x61),
    byte(0x28), byte(0x35), byte(0x31), byte(0x11), byte(0x11), byte(0x24), byte(0xE3), byte(0x10),
    byte(0x04), byte(0xC7), byte(0x88), byte(0xE5), byte(0x11), byte(0x48), byte(0x4C), byte(0x8E),
    byte(0x30), byte(0x43), byte(0x8D), byte(0x12), byte(0x45), byte(0xCF), byte(0x11), byte(0x12),
    byte(0x04), byte(0x34), byte(0x21), byte(0x21), byte(0x10), byte(0x72), byte(0x0D), byte(0x0F),
    byte(0x11), byte(0x00), byte(0x08), byte(0x7A), byte(0xCE), byte(0x08), byte(0x02), byte(0xEA),
    byte(0x20), byte(0xB2), byte(0xF1), byte(0x10), byte(0xC0), byte(0x08), byte(0x36), byte(0x41),
    byte(0x45), byte(0x10), byte(0x24), byte(0xF2), byte(0x50), byte(0x61), byte(0x84), byte(0x49),
    byte(0x38), byte(0x8B), byte(0x01), byte(0x24), byte(0xA2), byte(0x38), byte(0xD4), byte(0xD1),
    byte(0x38), byte(0xBC), byte(0x40), byte(0x21), byte(0x21), byte(0x22), byte(0x01), byte(0x11),
    byte(0x2F), byte(0x11), byte(0x11), byte(0xC0), byte(0x3D), byte(0x2A), byte(0xC0), byte(0x4C),
    byte(0x49), byte(0xC0), byte(0x44), byte(0x39), byte(0x48), byte(0x10), byte(0xB0), byte(0xE4),
    byte(0x2D), byte(0x21), byte(0x2F), byte(0x01), byte(0x24), byte(0xA5), byte(0x39), byte(0x13),
    byte(0x04), byte(0x47), byte(0x21), byte(0x0B), byte(0x2E), byte(0xC0), byte(0x09), byte(0x39),
    byte(0x1C), byte(0x8E), byte(0x30), byte(0x44), byte(0xC8), byte(0x30), byte(0x44), byte(0xB1),
    byte(0x11), byte(0x05), byte(0x08), byte(0x44), byte(0x48), byte(0x0B), byte(0x38), byte(0xD1),
    byte(0xA3), byte(0x11), byte(0x51), byte(0x0B), byte(0x38), byte(0xF3), byte(0x04), byte(0x35),
    byte(0x3C), byte(0xC7), byte(0x10), byte(0xC4), byte(0x84), byte(0x2D), byte(0x51), byte(0x12),
    byte(0xC4), byte(0x43), byte(0xCE), byte(0x45), byte(0x3C), byte(0x4E), byte(0x2C), byte(0x48),
    byte(0x44), byte(0x4D), byte(0x31), byte(0x11), byte(0x90), byte(0x23), byte(0x8D), byte(0x38),
    byte(0xC2), byte(0x02), byte(0x90), byte(0x51), byte(0x4E), byte(0x45), byte(0x38), byte(0xC4),
    byte(0x08), byte(0x80), byte(0xC4), byte(0xC4), byte(0x04), byte(0xC4), byte(0xC9), byte(0x34),
    byte(0x4E), byte(0x34), byte(0x6B), byte(0xCE), byte(0x49), byte(0x22), byte(0x01), byte(0x2C),
    byte(0x49), byte(0xC4), byte(0x01), byte(0x14), byte(0xE3), byte(0x45), byte(0x41), byte(0xAB),
    byte(0x10), byte(0x00), byte(0xC4), byte(0x47), byte(0x53), byte(0x88), byte(0x08), byte(0x4D),
    byte(0x88), byte(0x14), byte(0x4D), byte(0x87), byte(0x38), byte(0xB1), byte(0x2F), byte(0x38),
    byte(0xB2), byte(0x02), byte(0x12), byte(0xC2), byte(0x0D), byte(0x0E), byte(0x52), byte(0x0D),
    byte(0x00), byte(0xB2), byte(0xD8), byte(0xBD), byte(0x42), byte(0xCB), byte(0xC4), byte(0x44),
    byte(0xD4), byte(0x44), byte(0xD9), byte(0x51), byte(0x10), byte(0x4B), byte(0x08), byte(0x2C),
    byte(0x84), byte(0xC0), byte(0x45), byte(0x8B), byte(0xD1), byte(0x20), byte(0x21), byte(0x2B),
    byte(0x11), byte(0x24), byte(0xA0), byte(0x08), byte(0x23), byte(0x91), byte(0x0C), byte(0x83),
    byte(0x46), byte(0x8C), byte(0x40), byte(0x88), byte(0x48), byte(0x83), byte(0x8D), byte(0x91),
    byte(0x73), byte(0xCB), byte(0x00), byte(0x83), byte(0x72), byte(0x38), byte(0xD9), byte(0xCE),
    byte(0x3C), byte(0x48), byte(0xC4), byte(0x54), byte(0x42), byte(0xCE), byte(0x3F), byte(0x52),
    byte(0x04), byte(0x5B), byte(0x11), byte(0x0B), byte(0x01), byte(0x32), byte(0x0E), byte(0x35),
    byte(0x21), byte(0xC8), byte(0x3E), byte(0x20), byte(0x11), byte(0x45), byte(0x8C), byte(0xCE),
    byte(0x58), byte(0xDC), byte(0x4E), byte(0x00), byte(0x38), byte(0xD1), byte(0x21), byte(0x51),
    byte(0x20), byte(0x44), byte(0xCC), byte(0xD1), byte(0x50), byte(0x48), byte(0x51), byte(0x10),
    byte(0x02), byte(0xA3), byte(0x20), byte(0x51), byte(0x44), byte(0x44), byte(0x43), byte(0x42),
    byte(0x13), byte(0x31), byte(0xC0), byte(0x34), byte(0xAD), byte(0x40), byte(0x2D), byte(0x41),
    byte(0x21), byte(0x50), byte(0x82), byte(0xC3), byte(0x20), byte(0xD1), byte(0xA0), byte(0x09),
    byte(0x32), byte(0x0E), byte(0x36), byte(0x55), byte(0x0B), byte(0x2E), byte(0xC3), byte(0x83),
    byte(0x10), byte(0xBA), byte(0x4E), byte(0x20), byte(0xDC), byte(0x84), byte(0x01), byte(0x23),
    byte(0x8D), byte(0xCC), byte(0x05), byte(0xE3), byte(0x21), byte(0x11), byte(0x02), byte(0x4C),
    byte(0xE4), byte(0x6F), byte(0x39), byte(0x22), byte(0x13), byte(0x20), byte(0xE3), byte(0x6F),
    byte(0x2C), byte(0x06), byte(0x04), byte(0x46), byte(0x01), byte(0x91), byte(0x10), byte(0x4C),
    byte(0x44), byte(0x08), byte(0xE4), byte(0x43), byte(0xBC), byte(0x80), byte(0x8A), byte(0xD8),
    byte(0x40), byte(0x11), byte(0xBC), byte(0x03), byte(0xC4), byte(0x47), byte(0x23), byte(0xC4),
    byte(0x08), byte(0x80), byte(0x0B), byte(0xC8), byte(0xF0), byte(0x02), byte(0x12), byte(0x64),
    byte(0x4E), byte(0x50), byte(0xD0), byte(0xE5), byte(0x39), byte(0x13), byte(0x32), byte(0x50),
    byte(0xF3), byte(0xCE), byte(0x45), byte(0x39), byte(0x15), byte(0x10), byte(0xD4), byte(0xEE),
    byte(0x14), byte(0x52), byte(0x02), byte(0x20), byte(0x02), byte(0xF6), byte(0x1C), byte(0xE4),
    byte(0x84), byte(0xB0), byte(0x04), byte(0xD3), byte(0x11), byte(0x19), byte(0x15), byte(0x11),
    byte(0x16), byte(0x0E), byte(0x34), byte(0x48), byte(0x84), byte(0x35), byte(0x31), byte(0x11),
    byte(0x88), byte(0xE5), byte(0x0F), byte(0x2C), byte(0x4C), byte(0x88), byte(0x4C), byte(0x4B),
    byte(0xD1), byte(0x38), byte(0x91), byte(0x02), byte(0x4F), byte(0x31), byte(0xD1), byte(0x10),
    byte(0x49), byte(0x4E), byte(0x51), byte(0x19), byte(0x48), byte(0x54), byte(0x4C), byte(0x88),
    byte(0x5F), byte(0x21), byte(0x15), byte(0x10), byte(0xD9), byte(0x08), byte(0x18), byte(0x74),
    byte(0xED), byte(0x20), byte(0xD1), byte(0x33), byte(0x10), byte(0xD9), byte(0xD4), byte(0x34),
    byte(0x34), byte(0x44), byte(0x0E), byte(0x72), byte(0x13), byte(0x84), byte(0x04), byte(0x84),
    byte(0x88), byte(0x03), byte(0xF2), byte(0x00), byte(0x3C), byte(0x88), byte(0x46), byte(0x15),
    byte(0x12), byte(0xB0), byte(0x03), byte(0xE3), byte(0x45), byte(0x8B), byte(0x0E), byte(0x32),
    byte(0x20), byte(0x13), byte(0x8C), byte(0x00), byte(0xE3), byte(0x50), byte(0x49), byte(0x48),
    byte(0x5F), byte(0x13), byte(0x96), byte(0xCC), byte(0x83), byte(0xF6), byte(0x11), byte(0x3B),
    byte(0x00), byte(0x0E), byte(0x00), byte(0x93), byte(0x21), byte(0x52), byte(0x13), byte(0x63),
    byte(0x24), byte(0xC0), byte(0x47), byte(0x30), byte(0x01), byte(0x2C), byte(0x48), byte(0x8E),
    byte(0x51), byte(0x14), byte(0xEF), byte(0x44), byte(0xE0), byte(0xD4), byte(0x08), byte(0x49),
    byte(0x00), byte(0x4F), byte(0x31), byte(0x00), byte(0x08), byte(0x7B), byte(0x88), byte(0x2E),
    byte(0x70), byte(0x0B), byte(0x17), byte(0x22), byte(0x13), byte(0x50), byte(0x04), byte(0xC8),
    byte(0x38), byte(0xD9), byte(0x00), byte(0x49), byte(0x88), byte(0x8E), byte(0x49), byte(0x3A),
    byte(0x0D), byte(0x0D), byte(0x44), byte(0x93), byte(0x45), byte(0x89), byte(0x48), byte(0x19),
    byte(0x44), byte(0x44), byte(0xC9), byte(0x34), byte(0x44), byte(0x11), byte(0x38), byte(0x03),
    byte(0x0D), byte(0x11), byte(0x12), byte(0x4A), byte(0x83), byte(0x00), byte(0x18), byte(0x4A),
    byte(0x13), byte(0x48), byte(0x42), byte(0xC5), byte(0xBC), byte(0x73), byte(0x8D), byte(0x12),
    byte(0x42), byte(0x13), byte(0x1C), byte(0x44), byte(0x63), byte(0x01), byte(0x30), byte(0x22),
    byte(0x39), byte(0x51), byte(0x11), byte(0xC1), byte(0x42), byte(0x13), byte(0x12), byte(0xF2),
    byte(0x02), byte(0x4D), byte(0x44), byte(0x44), byte(0x88), byte(0xB1), byte(0x00), byte(0x46),
    byte(0xF4), byte(0x40), byte(0x09), byte(0x32), byte(0x02), byte(0x12), byte(0xF2), byte(0x04),
    byte(0x08), byte(0x4A), byte(0xC0), byte(0x34), byte(0x3C), byte(0x44), byte(0x08), byte(0x43),
    byte(0x53), byte(0x8C), byte(0x44), byte(0x82), byte(0x44), byte(0x80), byte(0x44), byte(0xBD),
    byte(0x13), byte(0x83), byte(0x50), byte(0x24), byte(0xE3), byte(0x38), byte(0x24), byte(0xCE),
    byte(0x47), byte(0x60), byte(0x0B), byte(0x2F), byte(0x63), byte(0x91), byte(0x28), byte(0x44),
    byte(0x6D), byte(0x11), byte(0x64), byte(0xB3), byte(0x11), byte(0x24), byte(0xEC), byte(0x39),
    byte(0x52), byte(0x04), byte(0x88), byte(0x44), byte(0x53), byte(0x00), byte(0x83), byte(0x6F),
    byte(0x11), byte(0x14), byte(0x8E), byte(0x34), byte(0x02), byte(0xF2), byte(0x20), byte(0xC3),
    byte(0xCB), byte(0x63), byte(0x31), byte(0xC8), byte(0x44), byte(0x3C), byte(0xC4), byte(0x08),
    byte(0x73), byte(0x4E), byte(0x2C), byte(0xE1), byte(0x98), byte(0x88), byte(0x04), byte(0xC2),
    byte(0x1F), byte(0x24), byte(0xC4), byte(0x3E), byte(0x10), byte(0x01), byte(0x63), byte(0x36),
    byte(0x0F), byte(0x12), byte(0x04), byte(0xD3), byte(0x10), byte(0xD4), byte(0xC8), byte(0x38),
    byte(0xD8), byte(0xD1), byte(0x01), byte(0x69), byte(0x48), byte(0x2C), byte(0xCC), byte(0xD1),
    byte(0x10), byte(0x4C), byte(0x8E), byte(0x51), byte(0x10), byte(0x84), byte(0xB4), byte(0x40),
    byte(0x11), byte(0x2D), byte(0x8B), byte(0x91), byte(0x18), byte(0x03), byte(0x48), byte(0x64),
    byte(0x04), byte(0xC8), byte(0x38), byte(0xD8), byte(0x87), byte(0x38), byte(0xE4), byte(0x84),
    byte(0x88), byte(0x05), byte(0x12), byte(0x12), byte(0x21), byte(0x0D), byte(0x4D), byte(0x44),
    byte(0x58), byte(0x91), byte(0x52), byte(0x03), byte(0x10), byte(0xD0), byte(0x84), byte(0xD8),
    byte(0x83), byte(0x43), byte(0x39), byte(0x68), byte(0xC8), byte(0x14), byte(0x52), byte(0x02),
    byte(0x50), byte(0xB4), byte(0xEB), byte(0x21), byte(0x24), byte(0xC4), byte(0x37), byte(0x23),
    byte(0x8E), byte(0x36), byte(0x25), byte(0x0B), byte(0x4D), byte(0x44), byte(0x44), byte(0x84),
    byte(0x82), byte(0xCB), byte(0x20), byte(0xE3), byte(0x62), byte(0x1C), byte(0x03), byte(0x42),
    byte(0x12), byte(0x14), byte(0x4E), byte(0x4C), byte(0x71), byte(0x11), byte(0x90), byte(0xD1),
    byte(0x11), byte(0x19), byte(0x8B), byte(0xC4), byte(0x44), byte(0x83), byte(0x83), byte(0xC9),
    byte(0x43), byte(0x0C), byte(0x11), byte(0x1C), byte(0x44), byte(0x00), byte(0xB2), byte(0x19),
    byte(0x12), byte(0x05), byte(0x40), byte(0x20), byte(0xB0), byte(0x01), byte(0x2C), byte(0x4B),
    byte(0xCB), byte(0x00), byte(0xD4), byte(0xEB), byte(0x20), byte(0xA1), byte(0x0B), byte(0x62),
    byte(0xE3), byte(0xCF), byte(0x39), byte(0x14), byte(0xD4), byte(0x34), byte(0x84), byte(0xD8),
    byte(0xCC), byte(0x44), byte(0x4C), byte(0xC8), byte(0x73), byte(0x91), byte(0x4E), byte(0xB1),
    byte(0x13), byte(0x4C), byte(0x44), byte(0x62), byte(0x38), byte(0xD0), byte(0xC8), byte(0x4C),
    byte(0x83), byte(0x8D), byte(0x88), byte(0x73), byte(0x88), byte(0x08), byte(0x4C), byte(0x88),
    byte(0x34), byte(0x62), byte(0xC4), byte(0xC5), byte(0x42), byte(0xC4), byte(0x8C), byte(0x05),
    byte(0x06), byte(0x1D), byte(0x31), byte(0x11), byte(0x80), byte(0x33), byte(0x08), byte(0x34),
    byte(0x84), byte(0x93), byte(0x44), byte(0x04), byte(0xC8), byte(0x38), byte(0xDC), byte(0x8E),
    byte(0x51), byte(0x31), byte(0xE7), byte(0x51), byte(0x20), byte(0x40), byte(0x34), byte(0x39),
    byte(0x4B), byte(0x38), byte(0xE4), byte(0x62), byte(0x00), byte(0xC3), byte(0xC0), byte(0x20),
    byte(0x63), byte(0x6C), byte(0x01), byte(0x31), byte(0x11), byte(0x20), byte(0x02), byte(0xEF),
    byte(0x38), byte(0xF5), byte(0x0B), byte(0x01), byte(0x32), byte(0x0E), byte(0x36), byte(0x40),
    byte(0x8E), byte(0x34), byte(0xE3), byte(0x18), byte(0xB0), byte(0x40), byte(0xC8), byte(0x08),
    byte(0x02), byte(0xE7), byte(0x39), byte(0x23), byte(0xC8), byte(0x4C), byte(0x02), byte(0xE2),
    byte(0x1D), byte(0x44), byte(0x42), byte(0x1E), byte(0x22), byte(0xCE), byte(0x48), byte(0x4C),
    byte(0xC7), byte(0x39), byte(0x44), byte(0x80), byte(0x34), byte(0x3C), byte(0x48), byte(0x48),
    byte(0xA8), byte(0x94), byte(0x45), byte(0x11), byte(0x0D), byte(0x4E), byte(0x52), byte(0x11),
    byte(0x12), byte(0x55), byte(0x13), byte(0x51), byte(0x11), byte(0x36), byte(0x44), byte(0xE3),
    byte(0x46), byte(0xA0), byte(0xD5), byte(0x4E), byte(0x2D), byte(0x51), byte(0x23), byte(0x10),
    byte(0x51), byte(0x0D), byte(0x48), byte(0x48), byte(0x0D), byte(0x60), byte(0xE3), byte(0x44),
    byte(0xA0), byte(0xD0), byte(0x91), byte(0x10), byte(0x04), byte(0x84), byte(0xC8), byte(0x40),
    byte(0x94), byte(0x44), byte(0x84), byte(0xD8), byte(0x84), byte(0x03), byte(0x4A), byte(0xB1),
    byte(0x84), byte(0x84), byte(0x2C), byte(0x58), byte(0x84), byte(0x45), byte(0x30), byte(0x08),
    byte(0x34), byte(0xB6), byte(0x36), byte(0x11), byte(0x24), byte(0xF2), byte(0x3C), byte(0xE4),
    byte(0x53), byte(0x84), byte(0xE0), byte(0x11), byte(0x0F), byte(0x21), byte(0x04), byte(0x2B),
    byte(0x25), byte(0x01), byte(0x24), byte(0x40), byte(0x93), byte(0xB8), byte(0x51), byte(0x48),
    byte(0x08), byte(0x44), byte(0x6F), byte(0x44), byte(0x85), byte(0x40), byte(0x4C), byte(0x4C),
    byte(0x44), byte(0x49), byte(0x38), byte(0x44), byte(0x1C), byte(0x05), byte(0x48), byte(0x39),
    byte(0x18), byte(0xC4), byte(0x00), byte(0xBB), byte(0xC4), byte(0x44), byte(0x53), byte(0x91),
    byte(0x30), byte(0x03), byte(0x42), byte(0x12), byte(0x52), byte(0x06), byte(0x1D), byte(0x3C),
    byte(0xC7), byte(0x44), byte(0xE5), byte(0xB3), byte(0x38), byte(0xFC), byte(0x14), byte(0x20),
    byte(0x22), byte(0x8B), byte(0x62), byte(0xF0), byte(0x12), byte(0x4E), byte(0x63), byte(0x80),
    byte(0x2E), byte(0x11), byte(0x03), byte(0xB9), byte(0x10), byte(0xC4), byte(0x46), byte(0x05),
    byte(0x13), byte(0x1C), byte(0xE4), byte(0x65), byte(0x20), byte(0xB2), byte(0xF1), byte(0x10),
    byte(0xF4), byte(0x44), byte(0x48), byte(0x43), byte(0x53), byte(0x94), byte(0x03), byte(0x72),
    byte(0x50), byte(0xD9), byte(0xCE), byte(0x4E), byte(0x71), byte(0x00), byte(0x4F), byte(0x60),
    byte(0x11), byte(0x32), byte(0x23), byte(0x8B), byte(0x0E), byte(0x80), byte(0x84), byte(0x94),
    byte(0xE0), byte(0x94), byte(0x4A), byte(0x53), byte(0x91), byte(0x10), byte(0x81), byte(0x8D),
    byte(0x8D), byte(0x13), byte(0x8F), byte(0x84), byte(0xB3), byte(0x8E), byte(0x0F), byte(0x43),
    byte(0xCE), byte(0x36), byte(0x01), byte(0x84), byte(0x34), byte(0x26), byte(0x2F), byte(0x51),
    byte(0x21), byte(0xED), byte(0x01), byte(0x35), byte(0x11), byte(0x12), byte(0x23), byte(0x8B),
    byte(0x39), byte(0x1C), byte(0x44), byte(0x08), byte(0x43), byte(0x53), byte(0x2D), byte(0x8C),
    byte(0x93), byte(0x39), byte(0x11), byte(0x31), byte(0x10), byte(0x35), byte(0x02), byte(0x13),
    byte(0x23), byte(0x94), byte(0x34), byte(0x3B), byte(0x4E), byte(0x4C), byte(0x49), byte(0x48),
    byte(0x34), byte(0x4B), byte(0x44), byte(0x01), byte(0x1B), byte(0x0E), byte(0x54), byte(0x43),
    byte(0x04), byte(0x35), byte(0x3B), byte(0xC0), byte(0x18), byte(0x49), byte(0x0D), byte(0x4C),
    byte(0x44), byte(0x72), byte(0x1C), byte(0x04), byte(0x44), byte(0x88), byte(0xE3), byte(0x0C),
    byte(0x38), byte(0xDB), byte(0xCE), byte(0x39), byte(0x1B), byte(0x40), byte(0x4D), byte(0x44),
    byte(0x40), byte(0x2F), byte(0x10), byte(0x02), byte(0x12), byte(0x23), byte(0x8D), byte(0x08),
    byte(0x44), byte(0x4D), byte(0xC8), byte(0x44), byte(0x48), byte(0x11), byte(0x2C), byte(0x88),
    byte(0x18), byte(0xD2), byte(0x05), byte(0x20), byte(0x20), byte(0x0D), byte(0x4F), byte(0x22),
    byte(0x0C), byte(0x20), byte(0xB0), byte(0x11), byte(0xAC), byte(0x03), byte(0x46), byte(0x50),
    byte(0x01), byte(0x84), byte(0xD1), byte(0x25), byte(0x00), byte(0x2C), byte(0xB6), byte(0x31),
    byte(0x11), byte(0x23), byte(0xCE), byte(0x35), byte(0x21), byte(0x23), byte(0x10), byte(0x00),
    byte(0xF1), byte(0x21), byte(0x21), byte(0x20), byte(0x34), byte(0x83), byte(0x00), byte(0x2E),
    byte(0x50), byte(0x02), byte(0x4C), byte(0xE4), byte(0x63), byte(0x10), byte(0x20), byte(0x03),
    byte(0x12), byte(0x04), byte(0x53), byte(0x20), byte(0x22), byte(0xC4), byte(0xC8), byte(0x73),
    byte(0x8E), byte(0x4E), byte(0x40), byte(0x12), byte(0x4F), byte(0x20), byte(0x15), byte(0x13),
    byte(0x20), byte(0x84), byte(0x34), byte(0x4C), byte(0x93), byte(0x38), byte(0x22), byte(0xA2),
    byte(0x01), byte(0x11), byte(0x04), byte(0x46), byte(0x31), byte(0x12), byte(0x3C), byte(0x84),
    byte(0xC4), byte(0x88), byte(0x43), byte(0x53), byte(0x44), byte(0x02), byte(0xF3), byte(0x1D),
    byte(0x44), byte(0xB3), byte(0x44), byte(0x40), byte(0x13), byte(0x30), byte(0x43), byte(0x53),
    byte(0x84), byte(0x46), byte(0x0E), byte(0x34), byte(0x39), byte(0xC0), byte(0x3C), byte(0xF6),
    byte(0x24), byte(0x5C), byte(0x00), byte(0x93), byte(0x2D), byte(0x8B), byte(0xD1), byte(0x39),
    byte(0x31), byte(0x02), byte(0x4E), byte(0x03), byte(0xCF), byte(0x44), byte(0xE0), byte(0x02),
    byte(0x1E), byte(0xB2), byte(0x04), byte(0xC8), byte(0x86), byte(0x44), byte(0x8C), byte(0xE1),
    byte(0xA5), byte(0x50), byte(0xD0), byte(0xF2), byte(0x11), byte(0x12), byte(0x0E), byte(0x51),
    byte(0x2B), byte(0x82), byte(0x09), byte(0x44), byte(0x6C), byte(0x10), byte(0x32), byte(0x00),
    byte(0xC4), byte(0x40), byte(0x03), byte(0x63), byte(0x22), byte(0x06), byte(0x37), byte(0x31),
    byte(0xCE), byte(0x50), byte(0x61), byte(0xD3), byte(0xAC), byte(0x84), byte(0x93), byte(0xA0),
    byte(0xD0), byte(0xC8), byte(0x54), byte(0x80), byte(0xD4), byte(0x00), byte(0xBC), byte(0x88),
    byte(0x30), byte(0xF2), byte(0xC4), byte(0xC1), byte(0x40), byte(0x0B), byte(0x21), byte(0x36),
    byte(0x2F), byte(0x44), byte(0x44), byte(0x92), byte(0x51), byte(0x11), byte(0x20), byte(0x08),
    byte(0x21), byte(0x0F), byte(0x4E), byte(0x03), byte(0x52), byte(0x58), byte(0x44), byte(0x71),
    byte(0x11), byte(0x23), byte(0x94), byte(0x44), byte(0x21), byte(0x28), byte(0x0C), byte(0x43),
    byte(0x53), byte(0x20), byte(0x56), byte(0x2B), byte(0x10), byte(0x54), byte(0xE3), byte(0x11),
    byte(0x31), byte(0x11), byte(0x30), byte(0x83), byte(0x44), byte(0xBD), byte(0x11), byte(0x0F),
    byte(0x01), byte(0x11), byte(0x23), byte(0x21), byte(0x21), byte(0x00), byte(0x48), byte(0x4D),
    byte(0x87), byte(0x01), byte(0x31), byte(0x15), byte(0x11), byte(0x1C), byte(0x94), byte(0x08),
    byte(0x21), byte(0x12), byte(0x4A), byte(0x04), byte(0x46), byte(0x50), byte(0x48), byte(0x94),
    byte(0x3E), byte(0xF0), byte(0x11), byte(0x4C), byte(0x80), byte(0x94), byte(0x2C), byte(0x04),
    byte(0x4B), byte(0x62), byte(0x03), byte(0x0E), byte(0x50), byte(0xD4), byte(0xE0), byte(0x04),
    byte(0x82), byte(0xC8), byte(0x4D), byte(0x8C), byte(0x93), byte(0x00), byte(0x51), byte(0x71),
    byte(0x10), byte(0x23), byte(0x86), byte(0x34), byte(0x86), byte(0x44), byte(0xA0), byte(0xD0),
    byte(0xC8), byte(0x08), byte(0x04), byte(0xC4), byte(0x88), byte(0x70), byte(0x11), byte(0x00),
    byte(0x24), byte(0xC4), byte(0x46), byte(0x64), byte(0x4E), byte(0x59), byte(0x31), byte(0xEB),
    byte(0x39), byte(0x24), byte(0xA3), byte(0x10), byte(0x64), byte(0x44), byte(0x13), byte(0x63),
    byte(0x8D), byte(0x0C), byte(0x44), byte(0x60), byte(0x4D), byte(0x30), byte(0x02), byte(0x2A),
    byte(0x71), byte(0x11), byte(0x48), byte(0x42), byte(0xC5), byte(0xC4), byte(0x41), byte(0x88),
    byte(0x38), byte(0xDC), byte(0xC4), byte(0x2C), byte(0x45), byte(0x48), byte(0x48), byte(0x83),
    byte(0x8D), byte(0x84), byte(0xE5), byte(0xF3), byte(0x44), byte(0x02), byte(0x0D), byte(0x20),
    byte(0xD1), byte(0xAF), byte(0x44), byte(0x44), byte(0xD3), byte(0x63), byte(0x34), byte(0x40),
    byte(0x0C), byte(0x49), byte(0x0B), byte(0x10), byte(0x24), byte(0xC8), byte(0x38), byte(0xD9),
    byte(0x15), byte(0x11), byte(0x16), byte(0x01), byte(0x38), byte(0x36), byte(0x2B), byte(0x01),
    byte(0x89), byte(0x84), byte(0x34), byte(0x44), byte(0x40), byte(0x2E), byte(0x51), byte(0x04),
    byte(0x2C), byte(0x83), byte(0x46), byte(0xC9), byte(0x30), byte(0x0D), byte(0x0C), byte(0x04),
    byte(0x43), byte(0x84), byte(0x82), byte(0xCB), byte(0xB0), byte(0x44), byte(0x92), byte(0x00),
    byte(0x61), byte(0x25), byte(0x00), byte(0x82), byte(0xEE), byte(0x51), byte(0x34), byte(0x88),
    byte(0x0C), byte(0x48), byte(0x0D), byte(0x00), byte(0xB6), byte(0x12), byte(0x21), byte(0x28),
    byte(0x44), byte(0x34), byte(0x41), byte(0x48), byte(0x4E), byte(0x53), byte(0x91), byte(0x58),
    byte(0x04), byte(0x43), byte(0xAC), byte(0x05), byte(0x98), byte(0x11), byte(0x1B), byte(0xD1),
    byte(0x11), byte(0x21), byte(0x0D), byte(0x4F), byte(0x21), byte(0x02), byte(0x4C), byte(0x83),
    byte(0x8D), byte(0x98), byte(0xB0), byte(0x12), byte(0x4B), byte(0x22), byte(0x88), byte(0x2C),
    byte(0xBC), byte(0x88), byte(0x49), byte(0x31), byte(0x11), byte(0xB8), byte(0xF1), byte(0x11),
    byte(0x01), byte(0x32), byte(0x0E), byte(0x36), byte(0x24), byte(0x48), byte(0x30), byte(0x4C),
    byte(0x93), byte(0x00), byte(0x61), byte(0x22), byte(0x38), byte(0xC3), byte(0xC0), byte(0x44),
    byte(0x48), byte(0x14), byte(0x4C), byte(0x73), byte(0x91), byte(0x21), byte(0x36), byte(0x2C),
    byte(0x21), byte(0x24), byte(0xA3), byte(0x11), byte(0x22), byte(0x06), byte(0x37), byte(0x23),
    byte(0x91), byte(0x4E), byte(0x00), byte(0x93), byte(0x99), byte(0x43), byte(0x63), byte(0x38),
    byte(0xB2), byte(0xC0), byte(0x45), byte(0x2C), byte(0x93), byte(0x44), byte(0x04), byte(0xC4),
    byte(0x19), byte(0x88), byte(0x8B), byte(0x10), byte(0x04), byte(0x4B), byte(0x62), byte(0x32),
    byte(0x12), byte(0x09), byte(0x44), byte(0x92), byte(0xA0), byte(0xD0), byte(0xC4), byte(0x10),
    byte(0x3C), byte(0xD1), byte(0x51), byte(0x31), byte(0xF2), byte(0x38), byte(0xD1), byte(0xA4),
    byte(0x5C), byte(0x03), byte(0x0F), byte(0x2C), byte(0x48), byte(0x87), byte(0x10), byte(0x22),
    byte(0xA4), byte(0x35), byte(0x52), byte(0x11), byte(0x38), byte(0xD3), byte(0x04), byte(0x35),
    byte(0x3A), byte(0xC4), byte(0x1A), byte(0x30), byte(0x11), byte(0x2B), byte(0x50), byte(0x11),
    byte(0x20), byte(0xE5), byte(0x12), byte(0xC4), byte(0x04), byte(0xC7), byte(0x11), byte(0x1A),
    byte(0xC0), byte(0x50), byte(0x61), byte(0xE6), byte(0x50), byte(0x44), byte(0x92), byte(0x91),
    byte(0x71), byte(0x02), byte(0x51), byte(0x32), byte(0x15), byte(0x12), byte(0xF4), byte(0x4E),
    byte(0x54), byte(0x49), byte(0xC0), byte(0x34), byte(0x69), byte(0x0D), byte(0x4C), byte(0x84),
    byte(0x44), byte(0xC4), byte(0xE0), byte(0x8A), byte(0x94), byte(0xE4), byte(0x46), byte(0x11),
    byte(0x38), byte(0x8B), byte(0x00), byte(0x83), byte(0x31), byte(0x10), byte(0xC3), byte(0x95),
    byte(0x12), byte(0xC0), byte(0x0D), byte(0x00), byte(0x61), byte(0x11), byte(0x90), byte(0xD2),
    byte(0x4E), byte(0x62), byte(0xD1), byte(0x13), byte(0x58), byte(0xE4), byte(0x4A), byte(0xAC),
    byte(0x41), byte(0x80), byte(0x2E), byte(0x52), byte(0x0D), byte(0x00), byte(0xBB), byte(0x00),
    byte(0x20), byte(0xDC), byte(0x82), byte(0x20), byte(0x43), byte(0x42), byte(0x12), byte(0xC1),
    byte(0x0C), byte(0x39), byte(0x16), byte(0x22), byte(0x01), byte(0x10), byte(0xE0), byte(0x04),
    byte(0xE5), byte(0x44), byte(0xC8), byte(0x40), byte(0x13), byte(0xC4), byte(0xE5), byte(0x06),
    byte(0x1E), byte(0x44), byte(0x93), byte(0x00), byte(0x12), byte(0xC8), byte(0x48), byte(0x7C),
    byte(0xD1), byte(0x20), byte(0x02), byte(0xF2), byte(0x3D), byte(0x12), byte(0x0D), byte(0x1A),
    byte(0x52), byte(0x11), byte(0x33), byte(0x10), byte(0x03), byte(0x20), byte(0xED), byte(0x48),
    byte(0x48), byte(0x84), byte(0xEC), byte(0x00), byte(0xD0), byte(0x06), byte(0x10), byte(0xC1),
    byte(0x0D), byte(0x4E), byte(0x05), byte(0x4E), byte(0x20), byte(0x3A), byte(0x0C), byte(0x00),
    byte(0x62), byte(0x0D), byte(0x13), byte(0x33), byte(0x8D), byte(0x20), byte(0x61), byte(0xD3),
    byte(0x9D), byte(0x41), byte(0x84), byte(0x84), byte(0x02), byte(0xCB), byte(0x94), byte(0x83),
    byte(0x48), byte(0x48), byte(0x7E), byte(0x0E), byte(0x51), byte(0x14), byte(0x84), byte(0x2C),
    byte(0x5C), byte(0xC7), byte(0x10), byte(0xE4), byte(0x58), byte(0xA0), byte(0xC3), byte(0xC0),
    byte(0x09), byte(0x3C), byte(0x44), byte(0x48), byte(0xF3), byte(0x8D), byte(0x0F), byte(0x24),
    byte(0xC0), byte(0x4C), byte(0x43), byte(0x04), byte(0x35), byte(0x3B), byte(0x00), byte(0x20),
    byte(0xD4), byte(0xC0), byte(0x20), byte(0xD8), byte(0x87), byte(0x01), byte(0x11), byte(0x84),
    byte(0xBC), byte(0xE3), byte(0xD4), byte(0x2C), byte(0x04), byte(0x6E), byte(0x35), byte(0x33),
    byte(0xB1), byte(0x11), byte(0x51), byte(0x00), byte(0x2E), byte(0x32), byte(0x11), byte(0x10),
    byte(0x24), byte(0xC8), byte(0x38), byte(0xDD), byte(0x84), byte(0x00), byte(0xF3), byte(0x8D),
    byte(0x90), byte(0xC3), byte(0xCB), byte(0x39), byte(0x81), byte(0x04), byte(0x89), byte(0x42),
    byte(0xD3), byte(0x51), byte(0x10), byte(0x0B), byte(0x88), byte(0xE3), byte(0x53), byte(0x00),
    byte(0x83), byte(0x6F), byte(0x10), byte(0x00), byte(0x84), byte(0xBC), byte(0x02), byte(0x0D),
    byte(0x80), byte(0xF3), byte(0xCB), byte(0x62), byte(0xC1), byte(0x00), byte(0x49), byte(0x44),
    byte(0x44), byte(0xD8), byte(0x80), byte(0xC4), byte(0xC8), byte(0x70), byte(0x0A), byte(0x12),
    byte(0x83), byte(0x53), byte(0x11), byte(0x15), byte(0x48), byte(0x11), byte(0x6B), byte(0x00),
    byte(0x34), byte(0x01), byte(0x84), byte(0x88), byte(0x70), byte(0x08), byte(0x46), byte(0x52),
    byte(0x12), byte(0x1E), byte(0xF0), byte(0x11), byte(0x4C), byte(0x80), byte(0x94), byte(0x2C),
    byte(0x04), byte(0x62), byte(0x00), byte(0xC1), byte(0x11), byte(0x02), byte(0xF1), byte(0x11),
    byte(0x14), byte(0xE4), byte(0x4C), byte(0x84), byte(0x84), byte(0xF6), byte(0x10), byte(0x81),
    byte(0x87), byte(0x4F), byte(0x25), byte(0x03), byte(0x0C), byte(0x43), byte(0x4B), byte(0x62),
    byte(0x32), byte(0x12), byte(0x08), byte(0xE5), byte(0x44), byte(0x46), byte(0x20), byte(0x0D),
    byte(0x0C), byte(0x80), byte(0xC0), byte(0x4C), byte(0x4B), byte(0xD1), byte(0x38), byte(0x35),
    byte(0x02), byte(0x4C), byte(0x83), byte(0x8D), byte(0xCD), byte(0x11), byte(0x00), byte(0x4E),
    byte(0x55), byte(0x0D), byte(0xCD), byte(0x12), byte(0x0F), byte(0x91), byte(0x23), byte(0xC4),
    byte(0x08), byte(0x80), byte(0x0B), byte(0x2D), byte(0x8B), byte(0x04), byte(0x11), byte(0x32),
    byte(0x0D), byte(0x1A), byte(0xC3), byte(0x91), byte(0x34), byte(0x83), byte(0x46), byte(0x91),
    byte(0x51), byte(0x0D), byte(0x20), byte(0xD1), byte(0xA0), byte(0x14), byte(0x51), byte(0x02),
    byte(0x4E), byte(0x23), byte(0x8D), byte(0x14), byte(0x44), byte(0x44), byte(0x34), byte(0x21),
    byte(0x28), byte(0x35), byte(0x22), byte(0x03), byte(0x13), byte(0x43), byte(0x48), byte(0x4F),
    byte(0x24), byte(0xD8), byte(0x2C), byte(0x48), byte(0x03), byte(0x50), byte(0xB4), byte(0xF6),
    byte(0x39), byte(0x14), byte(0x58), byte(0xC4), byte(0x03), byte(0x46), byte(0x12), byte(0xC1),
    byte(0x0D), byte(0x4C), byte(0x83), byte(0x8D), byte(0x8C), byte(0x41), byte(0x0F), byte(0x90),
    byte(0x31), byte(0x84), byte(0xC8), byte(0xF1), byte(0x02), byte(0x20), byte(0x52), byte(0x02),
    byte(0xD9), byte(0x12), byte(0x13), byte(0x11), byte(0x1C), byte(0xD1), byte(0x39), byte(0x40),
    byte(0x4B), byte(0x12), byte(0xD1), byte(0x02), byte(0x11), byte(0x24), byte(0x80), byte(0x45),
    byte(0x8C), byte(0xC7), byte(0x44), byte(0xE5), byte(0x06), byte(0x1C), byte(0xE5), byte(0x13),
    byte(0x88), byte(0x70), byte(0x0B), byte(0x2C), byte(0x43), byte(0x46), byte(0x12), byte(0x51),
    byte(0x00), byte(0x46), byte(0xC2), byte(0x03), byte(0x0C), byte(0xB1), byte(0x32), byte(0x10),
    byte(0x08), byte(0xD1), byte(0x10), byte(0x03), byte(0x21), byte(0x01), byte(0x18), byte(0x44),
    byte(0x01), byte(0x44), byte(0xC8), byte(0x15), byte(0x42), byte(0xEF), byte(0x44), byte(0xE3),
    byte(0xC4), byte(0x45), byte(0x36), byte(0x28), byte(0x35), byte(0x24), byte(0xC4), byte(0x00),
    byte(0x3A), byte(0x0C), byte(0x3D), byte(0x13), byte(0x95), byte(0x13), byte(0x24), byte(0xD4),
    byte(0x14), byte(0x58), byte(0xC4), byte(0x4C), byte(0x02), byte(0x0B), byte(0xB0), byte(0x44),
    byte(0xC7), byte(0x38), byte(0x39), byte(0xCE), byte(0x4C), byte(0x42), byte(0xF2), byte(0x38),
    byte(0xB0), byte(0xC8), byte(0x11), byte(0x1C), byte(0x44), byte(0x14), byte(0xB1), byte(0x02),
    byte(0x4E), byte(0x71), byte(0x00), byte(0x55), byte(0x8A), byte(0xC8), byte(0x18), byte(0x74),
    byte(0xE1), byte(0x00), byte(0x6B), byte(0x00), byte(0x45), byte(0x12), byte(0x00), byte(0x18),
    byte(0x4C), byte(0xCE), byte(0x50), byte(0x61), byte(0xF2), byte(0x20), byte(0xD1), byte(0xAF),
    byte(0x51), byte(0x13), byte(0xCE), byte(0x48), byte(0x49), byte(0x17), byte(0x21), byte(0x24),
    byte(0xF6), byte(0x1C), byte(0xE3), byte(0x32), byte(0x28), byte(0x83), byte(0x60), byte(0x18),
    byte(0x43), byte(0x53), byte(0xB9), byte(0x63), byte(0x44), byte(0x46), byte(0xC0), byte(0x02),
    byte(0x1C), byte(0x83), byte(0x44), byte(0x98), byte(0x04), byte(0xA0), byte(0x1C), byte(0x40),
    byte(0x03), byte(0x98), byte(0x43), byte(0x44), byte(0x44), byte(0x04), byte(0xC8), byte(0x38),
    byte(0xDA), byte(0x13), byte(0x10), byte(0xCC), byte(0x44), byte(0x00), byte(0xB2), byte(0x13),
    byte(0x62), byte(0x23), byte(0x80), byte(0x08), byte(0x7E), byte(0x00), byte(0x44), byte(0x38),
    byte(0x44), byte(0x01), byte(0x3D), byte(0x48), byte(0x38), byte(0xB1), byte(0x0D), byte(0x08),
    byte(0x4C), byte(0xCE), byte(0x4C), byte(0x02), byte(0xF3), byte(0x10), byte(0xD0), byte(0xE3),
    byte(0x21), byte(0x20), byte(0x94), byte(0x49), byte(0x22), byte(0x0E), byte(0x36), byte(0x52),
    byte(0x0D), byte(0x18), byte(0x44), byte(0x66), byte(0x01), byte(0x10), byte(0xC4), byte(0x36),
    byte(0xD3), byte(0x93), byte(0x20), byte(0x21), byte(0x22), byte(0x38), byte(0xB2), byte(0xC4),
    byte(0x09), byte(0x32), byte(0x0E), byte(0x36), byte(0xC3), byte(0x83), byte(0x11), byte(0x13),
    byte(0x73), byte(0x01), byte(0x22), byte(0xB5), byte(0x11), byte(0x14), byte(0x88), byte(0x38),
    byte(0xDB), byte(0xCE), byte(0x48), byte(0x84), byte(0xC8), byte(0x54), byte(0x48), byte(0x88),
    byte(0x54), byte(0x82), byte(0xE2), byte(0x38), byte(0xD4), byte(0x94), byte(0x30), byte(0x44),
    byte(0x72), byte(0x1C), byte(0xE4), byte(0xE1), byte(0x50), byte(0x31), byte(0x84), byte(0x4F),
    byte(0x62), byte(0x12), byte(0x1F), byte(0x20), byte(0x05), byte(0x12), byte(0x20), byte(0x0F),
    byte(0x21), byte(0x30), byte(0x0B), byte(0xB0), byte(0xE5), byte(0x13), byte(0x1E), byte(0xD3),
    byte(0x91), byte(0xAC), byte(0xE1), byte(0xAF), byte(0x10), byte(0xDC), byte(0x94), byte(0x33),
    byte(0x61), byte(0x01), byte(0x9D), byte(0x41), byte(0xB5), byte(0x00), byte(0xD8), byte(0x40),
    byte(0x62), byte(0xF1), byte(0x13), byte(0x84), byte(0x03), byte(0x75), byte(0x20), byte(0x24),
    byte(0xC8), byte(0x32), byte(0xD1), byte(0x16), byte(0x48), byte(0xF0), byte(0x0F), byte(0x11),
    byte(0x1C), byte(0xC7), byte(0x44), byte(0x40), byte(0x13), byte(0xC8), byte(0xA6), byte(0x32),
    byte(0x30), byte(0x82), byte(0xC4), byte(0xC8), byte(0x23), byte(0x91), byte(0x12), byte(0x00),
    byte(0x82), byte(0x39), byte(0x43), byte(0x53), byte(0xA0), byte(0xD4), byte(0xC4), byte(0x44),
    byte(0x44), byte(0x93), byte(0x20), byte(0xD1), byte(0xA0), byte(0x50), byte(0x32), byte(0x04),
    byte(0x34), byte(0x21), byte(0x31), byte(0x20), byte(0x21), byte(0xE3), byte(0x20), byte(0xD3),
    byte(0x44), byte(0x47), byte(0x53), byte(0x93), byte(0x13), byte(0x11), byte(0x0B), byte(0x01),
    byte(0x31), byte(0x33), byte(0x44), byte(0x05), byte(0x44), byte(0x2E), byte(0xF4), byte(0x44),
    byte(0x54), byte(0x43), byte(0x53), byte(0x88), byte(0x84), byte(0xC8), byte(0x64), byte(0x43),
    byte(0x6D), byte(0x38), byte(0xD1), byte(0x2F), byte(0x2C), byte(0x43), byte(0x53), byte(0x62),
    byte(0x54), byte(0x4E), byte(0x35), byte(0x38), byte(0xC4), byte(0x14), byte(0x83), byte(0x44),
    byte(0xB4), byte(0xE4), byte(0x4C), byte(0x00), byte(0xB9), byte(0x11), byte(0x44), byte(0xE4),
    byte(0x63), byte(0x44), byte(0x83), byte(0x4A), byte(0x85), byte(0x44), byte(0x98), byte(0xCC),
    byte(0x45), byte(0xD3), byte(0xCC), byte(0xE3), byte(0x8B), byte(0xC8), byte(0xF1), byte(0x04),
    byte(0x0E), byte(0x03), byte(0x58), byte(0x58), byte(0x06), byte(0x20), byte(0x15), byte(0x10),
    byte(0x08), byte(0x0E), byte(0x00), byte(0x93), byte(0x21), byte(0x51), byte(0x33), byte(0x44),
    byte(0x02), byte(0x0D), byte(0xBD), byte(0x13), byte(0x86), byte(0x44), byte(0x44), byte(0x92),
    byte(0x8C), byte(0x03), byte(0x46), byte(0x11), byte(0x1C), byte(0x44), byte(0x48), byte(0xF1),
    byte(0x02), byte(0x4E), byte(0xB1), byte(0x00), byte(0x16), byte(0x23), byte(0x8F), byte(0x62),
    byte(0xC0), byte(0x13), byte(0x08), byte(0x7C), byte(0x8E), byte(0x2C), byte(0x80), byte(0xE7),
    byte(0x10), byte(0x81), byte(0x87), byte(0x4E), byte(0xE3), byte(0x4B), byte(0x20), byte(0xD1),
    byte(0x22), byte(0x38), byte(0xD3), byte(0x44), byte(0x09), byte(0x32), byte(0x0E), byte(0x36),
    byte(0x23), byte(0x83), byte(0x13), byte(0x23), byte(0x85), byte(0x4D), byte(0x60), byte(0x11),
    byte(0x12), byte(0x23), byte(0x8C), byte(0x3D), byte(0x44), byte(0xC4), byte(0x46), byte(0x33),
    byte(0x82), byte(0x50), byte(0xC1), byte(0x0D), byte(0x4E), byte(0x31), byte(0x15), byte(0x20),
    byte(0x21), byte(0x2B), byte(0x20), byte(0xD2), byte(0xB3), byte(0x21), byte(0x32), byte(0xC4),
    byte(0xB0), byte(0x02), byte(0x0B), byte(0xC4), byte(0x40), byte(0x84), byte(0x21), byte(0x51),
    byte(0x32), byte(0x10), byte(0xD0), byte(0xF1), byte(0x10), byte(0xF2), byte(0xD8), byte(0xBC),
    byte(0x73), byte(0x93), byte(0x3B), byte(0x24), byte(0xD1), byte(0x00), byte(0x81), byte(0x87),
    byte(0x4E), byte(0x44), byte(0x14), byte(0x00), byte(0xB8), byte(0x8E), byte(0x34), byte(0x52),
    byte(0x11), byte(0x32), byte(0x65), byte(0x08), byte(0x0C), byte(0x4C), byte(0x88), byte(0x2C),
    byte(0x43), byte(0x42), byte(0x12), byte(0x03), byte(0x58), byte(0x58), byte(0x71), byte(0x11),
    byte(0x13), byte(0x23), byte(0x8C), byte(0x11), byte(0x61), byte(0x07), byte(0x11), byte(0x11),
    byte(0x32), byte(0x38), byte(0xC1), byte(0x01), byte(0x38), byte(0x36), byte(0x24), byte(0x54),
    byte(0x44), byte(0x58), byte(0x58), byte(0x71), byte(0x11), byte(0x12), byte(0xD3), byte(0x81),
    byte(0x38), byte(0x36), byte(0x2B), byte(0x39), byte(0x61), byte(0x11), byte(0x9C), byte(0x81),
    byte(0x87), byte(0x11), byte(0x18), byte(0x0C), byte(0x01), byte(0x92), byte(0x0D), byte(0x1A),
    byte(0xF4), byte(0x48), byte(0x39), byte(0x12), byte(0x13), byte(0x63), byte(0x34), byte(0x40),
    byte(0x0C), byte(0x84), byte(0xC8), byte(0x38), byte(0xD0), byte(0x0B), byte(0x79), byte(0xE7),
    byte(0x9E)
};

DictEntry TextCodec::STATIC_DICTIONARY[1024] = {};
const bool* TextCodec::DELIMITER_CHARS = TextCodec::initDelimiterChars();
const bool* TextCodec::TEXT_CHARS = TextCodec::initTextChars();
const int TextCodec::STATIC_DICT_WORDS = TextCodec::createDictionary(TextCodec::unpackDictionary(DICT_EN_1024, sizeof(DICT_EN_1024)), STATIC_DICTIONARY, 1024, 0);

bool* TextCodec::initDelimiterChars()
{
    bool* res = new bool[256];

    for (int i = 0; i < 256; i++) {
        if ((i >= ' ') && (i <= '/')) // [ !"#$%&'()*+,-./]
            res[i] = true;
        else if ((i >= ':') && (i <= '?')) // [:;<=>?]
            res[i] = true;
        else {
            switch (i) {
            case '\n':
            case '\r':
            case '_':
            case '|':
            case '{':
            case '}':
            case '[':
            case ']':
                res[i] = true;
                break;
            default:
                res[i] = false;
            }
        }
    }

    return res;
}

bool* TextCodec::initTextChars()
{
    bool* res = new bool[256];

    for (int i = 0; i < 256; i++) {
        res[i] = isUpperCase(byte(i)) | isLowerCase(byte(i));
    }

    return res;
}

TextCodec::TextCodec()
{
    _escape1 = DEFAULT_ESCAPE_TOKEN1; // dictionary word preceded by space symbol
    _escape2 = DEFAULT_ESCAPE_TOKEN2; // toggle upper/lower case of first word char
    _dictMap = new DictEntry*[1 << LOG_HASHES_SIZE];
    _dictList = new DictEntry[DICTIONARY_SIZE];
    _logHashSize = LOG_HASHES_SIZE;
    _hashMask = (1 << _logHashSize) - 1;

    memcpy(&_dictList[0], &STATIC_DICTIONARY[0], STATIC_DICT_WORDS * sizeof(DictEntry));

    // Populate hash map
    for (int i = 0; i < (1 << _logHashSize); i++) {
        _dictMap[i] = nullptr;
    }

    for (int i = 0; i < STATIC_DICT_WORDS; i++) {
        _dictMap[_dictList[i]._hash & _hashMask] = &_dictList[i];
    }

    // Pre-allocate all dictionary entries
    for (int i = STATIC_DICT_WORDS; i < DICTIONARY_SIZE - 2; i++)
        _dictList[i] = DictEntry(nullptr, -1, 0, i, 0);

    // Add special entries at end of map
    _escapes[0] = _escape1;
    _escapes[1] = _escape2;
    _dictList[DICTIONARY_SIZE - 1] = DictEntry(_escapes, 0, 0, DICTIONARY_SIZE - 1, 1);
    _dictList[DICTIONARY_SIZE - 2] = DictEntry(_escapes, 1, 0, DICTIONARY_SIZE - 2, 1);
    _staticDictSize = STATIC_DICT_WORDS;
}

TextCodec::TextCodec(byte dict[], int size, int logHashSize, int dictSize, byte delimiter1, byte delimiter2)
{
    if (isText(delimiter1))
        throw new IllegalArgumentException("Invalid delimiter parameter 1 (cannot be a text symbol)");

    if (isText(delimiter2))
        throw new IllegalArgumentException("Invalid delimiter parameter 2 (cannot be a text symbol)");

    if (delimiter1 == delimiter2)
        throw new IllegalArgumentException("The 2 delimiters must be different symbols");

    if ((logHashSize < 10) || (logHashSize > 28))
        throw IllegalArgumentException("The hash table size log must be in [10..28]");

    if ((dictSize < STATIC_DICT_WORDS) || (dictSize > 32768)) {
        stringstream ss;
        ss << "The number of words in the dictionary must be in [" << STATIC_DICT_WORDS << "..32767]";
        throw IllegalArgumentException(ss.str());
    }

    _escape1 = delimiter1; // dictionary word preceded by space symbol
    _escape2 = delimiter2; // toggle upper/lower case of first word char
    _logHashSize = logHashSize;
    _dictMap = new DictEntry*[1 << _logHashSize];
    _dictList = new DictEntry[dictSize];
    _hashMask = int32(1 << _logHashSize) - 1;
    int nbWords;

    // Replace default dictionary ?
    if (dict != DICT_EN_1024) {
        // Keep at least 20% space for dynamic dictionary
        nbWords = TextCodec::createDictionary(SliceArray<byte>(dict, size, 0), _dictList, dictSize * 4 / 5, 0);
    }
    else {
        const int sz = dictSize < sizeof(STATIC_DICTIONARY) ? dictSize : sizeof(STATIC_DICTIONARY);
        memcpy(&_dictList[0], &STATIC_DICTIONARY[0], sz);
        nbWords = STATIC_DICT_WORDS;
    }

    // Populate hash map
    for (int i = 0; i < (1 << _logHashSize); i++) {
        _dictMap[i] = nullptr;
    }

    for (int i = 0; i < nbWords; i++) {
        _dictMap[_dictList[i]._hash & _hashMask] = &_dictList[i];
    }

    // Pre-allocate all dictionary entries
    for (int i = nbWords; i < dictSize - 2; i++)
        _dictList[i] = DictEntry(nullptr, -1, 0, i, 0);

    // Add special entries at end of map
    _escapes[0] = _escape1;
    _escapes[1] = _escape2;
    _dictList[dictSize - 1] = DictEntry(_escapes, 0, 0, dictSize - 1, 1);
    _dictList[dictSize - 2] = DictEntry(_escapes, 1, 0, dictSize - 2, 1);
    _staticDictSize = nbWords;
}

bool TextCodec::forward(SliceArray<byte>& input, SliceArray<byte>& output, int count)
{
    if ((!SliceArray<byte>::isValid(input)) || (!SliceArray<byte>::isValid(output)))
        return false;

    if (input._array == output._array)
        return false;

    byte* src = input._array;
    byte* dst = output._array;

    if (output._length - output._index < getMaxEncodedLength(count))
        return false;

    int srcIdx = input._index;
    int dstIdx = output._index;

    if (count <= 1) {
        if (count > 0)
            dst[dstIdx++] = src[srcIdx++];

        input._index = srcIdx;
        output._index = dstIdx;
        return true;
    }

    const int srcEnd = srcIdx + count;
    const int dstEnd = output._length;
    const int dstEnd2 = output._length - 2;
    int anchor = isText(src[srcIdx]) ? srcIdx - 1 : srcIdx; // previous delimiter
    int endWordIdx = ~anchor;
    int emitAnchor = input._index; // never less than input._index
    int words = _staticDictSize;
    const int dynamicDictSize = DICTIONARY_SIZE - 3;
    int32 h1 = HASH1;
    int32 h2 = HASH1;
    bool isFirstWordChar = true;

    while ((srcIdx < srcEnd) && (dstIdx < dstEnd)) {
        byte cur = src[srcIdx];

        if (isText(cur)) {
            // Compute hashes
            // h1 -> hash of word chars
            // h2 -> hash of word chars with first char case flipped
            if (isFirstWordChar == true) {
                const int32 caseFlag = isUpperCase(cur) ? 32 : -32;
                h1 = h1 * HASH1 ^ int32(cur) * HASH2;
                h2 = h2 * HASH1 ^ (int32(cur) + caseFlag) * HASH2;
                isFirstWordChar = false;
            }
            else {
                const int hh = int(cur) * HASH2;
                h1 = h1 * HASH1 ^ hh;
                h2 = h2 * HASH1 ^ hh;
            }

            srcIdx++;
            continue;
        }

        bool mustEmit = true;

        if (((srcIdx > anchor + 2)) && (isDelimiter(cur) || (cur == _escape1) || (cur == _escape2))) // At least 2 letters
        {
            // Check word in dictionary
            const int length = srcIdx - anchor - 1;
            DictEntry* pe1 = _dictMap[h1 & _hashMask];
            DictEntry* pe2 = _dictMap[h2 & _hashMask];

            // Hash collision (quick check) ?
            if ((pe1 != nullptr) && ((pe1->_length != length) || (pe1->_hash != h1)))
                pe1 = nullptr;

            // Hash collision (quick check)  ?
            if ((pe2 != nullptr) && ((pe2->_length != length) || (pe2->_hash != h2)))
                pe2 = nullptr;

            DictEntry* pe = (pe2 == nullptr) ? pe1 : pe2;

            if (pe != nullptr) {
                // Hash collision (full check) ?
                const int l = pe->_pos + length;
                const byte* buf = pe->_buf;

                // Skip first position (same result)
                for (int i = pe->_pos + 1, j = anchor + 2; i < l; i++, j++) {
                    if (buf[i] != src[j]) {
                        // Hash collision
                        pe = nullptr;
                        break;
                    }
                }
            }

            if (pe == nullptr) {
                // Word not found in the dictionary: add it if at least 3 chars
                if (length > 2) {
                    // Dictionary full ? Reset index to end of static dictionary
                    if (words > dynamicDictSize)
                        words = _staticDictSize;

                    DictEntry* pe = &_dictList[words];

                    if ((pe->_idx >= _staticDictSize) && (pe->_idx <= dynamicDictSize) && (length < 32768)) {
                        // Evict and reuse old entry
                        _dictMap[pe->_hash & _hashMask] = nullptr;
                        pe->_buf = src;
                        pe->_pos = anchor + 1;
                        pe->_hash = h1;
                        pe->_idx = int16(words);
                        pe->_length = int16(length);
                    }

                    // Update hash map
                    _dictMap[h1 & _hashMask] = pe;
                    words++;
                }
            }
            else {
                // Word found in the dictionary
                // Skip space if only delimiter between 2 word references
                if ((endWordIdx != anchor) || (src[emitAnchor] != ' '))
                    dstIdx += emit(&src[emitAnchor], &dst[dstIdx], anchor+1-emitAnchor, dstEnd - dstIdx);

                if (dstIdx >= dstEnd2)
                    break;

                // Emit escape
                dst[dstIdx++] = (pe2 == nullptr) ? _escape1 : _escape2;

                // Emit word index (varint 7 bits + 8 bits)
                if (pe->_idx >= 128) {
                    dst[dstIdx++] = byte((pe->_idx & 0x7F) | 0x80);
                    dst[dstIdx++] = byte(pe->_idx >> 7);
                }
                else {
                    dst[dstIdx++] = byte(pe->_idx);
                }

                endWordIdx = srcIdx;
                mustEmit = false;
            }
        }

        if (mustEmit == true) {
            // Emit all symbols since last delimiter
            dstIdx += emit(&src[emitAnchor], &dst[dstIdx], srcIdx - emitAnchor, dstEnd - dstIdx);
        }

        // Reset delimiter position
        anchor = srcIdx;
        emitAnchor = anchor;
        srcIdx++;
        isFirstWordChar = true;
        h1 = HASH1;
        h2 = HASH1;
    }

    // Emit last symbols
    dstIdx += emit(&src[emitAnchor], &dst[dstIdx], srcEnd - emitAnchor, dstEnd - dstIdx);

    output._index = dstIdx;
    input._index = srcIdx;
    return srcIdx == srcEnd;
}

int TextCodec::emit(byte src[], byte dst[], int srcEnd, int dstEnd)
{
    return (3 * srcEnd < dstEnd) ? emit1(src, dst, srcEnd, dstEnd) : emit2(src, dst, srcEnd, dstEnd);
}

int TextCodec::emit1(byte src[], byte dst[], int srcEnd, int dstEnd)
{
    // Fast path
    int dstIdx = 0;

    for (int i = 0; i < srcEnd; i++) {
        if (src[i] == _escape1) {
            // Emit special word
            dst[dstIdx] = _escape1;
            dst[dstIdx + 1] = byte(0xFF);
            dst[dstIdx + 2] = byte(0xFF);
            dstIdx += 3;
        }
        else if (src[i] == _escape2) {
            // Emit special word
            dst[dstIdx] = _escape1;
            dst[dstIdx + 1] = byte(0xFE);
            dst[dstIdx + 2] = byte(0xFF);
            dstIdx += 3;
        }
        else {
            dst[dstIdx] = src[i];
            dstIdx++;
        }
    }

    return dstIdx;
}

int TextCodec::emit2(byte src[], byte dst[], int srcEnd, int dstEnd)
{
    // Slow path
    int dstIdx = 0;

    for (int i = 0; i < srcEnd; i++) {
        if (src[i] == _escape1) {
            if (dstIdx + 3 > dstEnd)
                break;

            // Emit special word
            dst[dstIdx] = _escape1;
            dst[dstIdx + 1] = byte(0xFF);
            dst[dstIdx + 2] = byte(0xFF);
            dstIdx += 3;
        }
        else if (src[i] == _escape2) {
            if (dstIdx + 3 > dstEnd)
                break;

            // Emit special word
            dst[dstIdx] = _escape1;
            dst[dstIdx + 1] = byte(0xFE);
            dst[dstIdx + 2] = byte(0xFF);
            dstIdx += 3;
        }
        else {
            if (dstIdx + 1 > dstEnd)
                break;

            dst[dstIdx] = src[i];
            dstIdx++;
        }
    }

    return dstIdx;
}

bool TextCodec::inverse(SliceArray<byte>& input, SliceArray<byte>& output, int count)
{
    if ((!SliceArray<byte>::isValid(input)) || (!SliceArray<byte>::isValid(output)))
        return false;

    if (input._array == output._array)
        return false;

    int srcIdx = input._index;
    int dstIdx = output._index;
    byte* src = input._array;
    byte* dst = output._array;

    if (count <= 1) {
        if (count > 0)
            dst[dstIdx++] = src[srcIdx++];

        input._index = srcIdx;
        output._index = dstIdx;
        return true;
    }

    const int srcEnd = srcIdx + count;
    const int dstEnd = output._length;
    int anchor = input._index - 1;
    int words = _staticDictSize;
    const int dynamicDictSize = DICTIONARY_SIZE - 3;
    bool wordRun = false;

    while ((srcIdx < srcEnd) && (dstIdx < dstEnd)) {
        byte cur = src[srcIdx++];

        if (isText(cur)) {
            dst[dstIdx++] = cur;
            continue;
        }

        if ((srcIdx > anchor + 3) && ((cur == _escape1) || (cur == _escape2) || (isDelimiter(cur)))) // At least 2 letters
        {
            // Create hash
            int32 h = HASH1;
            int length = srcIdx - anchor - 2;

            for (int i = 1; i <= length; i++) {
                h = h * HASH1 ^ int32(src[anchor + i]) * HASH2;
            }

            // Lookup word in dictionary
            DictEntry* pe = _dictMap[h & _hashMask];

            // Hash collision ?
            if ((pe != nullptr) && ((pe->_length != length) || (pe->_hash != h)))
                pe = nullptr;

            if (pe == nullptr) {
                // Word not found in the dictionary: add it if at least 3 letters
                if (length > 2) {
                    // Dictionary full ?
                    if (words > dynamicDictSize)
                        words = _staticDictSize;

                    DictEntry& e = _dictList[words];

                    if ((e._idx >= _staticDictSize) && (e._idx <= dynamicDictSize) && (length < 32768)) {

                        // Evict and reuse old entry
                        _dictMap[e._hash & _hashMask] = nullptr;
                        e._buf = src;
                        e._pos = anchor + 1;
                        e._hash = h;
                        e._idx = int16(words);
                        e._length = int16(length);
                    }

                    _dictMap[h & _hashMask] = &e;
                    words++;
                }
            }
        }

        if ((cur == _escape1) || (cur == _escape2)) {

            // Word in dictionary
            // Read word index (varint 7 bits + 8 bits)
            int idx = src[srcIdx++] & 0xFF;

            if ((idx & 0x80) != 0) {
                idx = (idx & 0x7F) | ((src[srcIdx++] & 0xFF) << 7);

                if (idx >= DICTIONARY_SIZE)
                    break;
            }

            DictEntry& e = _dictList[idx];

            // Sanity check
            if ((e._pos < 0) || (dstIdx + e._length >= dstEnd))
                break;

            // Add space if only delimiter between 2 words (2nd word in dictionary)
            if ((wordRun == true) && (idx <= dynamicDictSize))
                dst[dstIdx++] = ' ';

            // Emit word
            int32 flag = 0;

            // Flip case of first character
            if (cur == _escape2)
                flag = isUpperCase(e._buf[e._pos]) ? 32 : -32;

            dst[dstIdx++] = byte(e._buf[e._pos] + flag);
            const byte* buf = &e._buf[e._pos];

            for (int n = 1, l = e._length; n < l; n++, dstIdx++)
                dst[dstIdx] = buf[n];

            if (idx <= dynamicDictSize) {
                // Regular word entry
                wordRun = true;
                anchor = srcIdx;
            }
            else {
                // Escape entry
                wordRun = false;
                anchor = srcIdx - 1;
            }
        }
        else {
            wordRun = false;
            anchor = srcIdx - 1;
            dst[dstIdx++] = cur;
        }
    }

    output._index = dstIdx;
    input._index = srcIdx;
    return srcIdx == srcEnd;
}

// Create dictionary from array of words
int TextCodec::createDictionary(SliceArray<byte> input, DictEntry dict[], int maxWords, int startWord)
{
    int anchor = -1;
    int32 h = HASH1;
    int nbWords = startWord;
    int dictSize = input._length;
    byte* words = input._array;

    for (int i = 0; ((i < dictSize) && (nbWords < maxWords)); i++) {
        byte cur = words[i];

        if (isText(cur)) {
            h = h * HASH1 ^ int(cur) * HASH2;
            continue;
        }

        if ((isDelimiter(cur)) && (nbWords < maxWords) && (i >= anchor + 2)) // At least 2 letters
        {
            dict[nbWords] = DictEntry(words, anchor + 1, h, nbWords, i - anchor - 1);
            nbWords++;
        }

        anchor = i;
        h = HASH1;
    }

    return nbWords;
}

SliceArray<byte> TextCodec::unpackDictionary(const byte dict[], int dictSize)
{
    byte* buf = new byte[dictSize * 2];
    int d = 0;
    int val = 0;

    // Unpack 3 bytes into 4 6-bit symbols
    for (int i = 0; i < dictSize; i++) {
        val = (val << 8) | (dict[i] & 0xFF);

        if ((i % 3) == 2) {
            for (int ii = 18; ii >= 0; ii -= 6) {
                int c = (val >> ii) & 0x3F;

                if (c >= 32)
                    buf[d++] = ' ';

                c &= 0x1F;

                // Ignore padding symbols (> 26 and <= 31)
                if (c <= 26)
                    buf[d++] = (byte)(c + 'a');
            }

            val = 0;
        }
    }

    buf[d] = ' '; // End
    byte* res = new byte[d];
    memcpy(&res[0], &buf[1], d);
    delete[] buf;
    return SliceArray<byte>(res, d, 0);
}
